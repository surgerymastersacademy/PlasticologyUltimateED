// ===============================================================
// ================ خطوات النشر للحصول على الرابط الصحيح =============
// ===============================================================
/*
1.  **حفظ المشروع:** اضغط على أيقونة الحفظ (شكل الديسك) لحفظ أي تغييرات.
2.  **النشر (Deploy):**
    * في أعلى يمين الشاشة، اضغط على الزر الأزرق "Deploy".
    * اختر "New deployment".
3.  **إعدادات النشر:**
    * بجانب أيقونة الترس (Select type)، اختر "Web app".
    * في خانة "Description"، يمكنك كتابة أي وصف (مثلاً "تعديل منطق حساب نتائج الاختبار").
    * في خانة "Execute as"، اتركها "Me".
    * **الأهم:** في خانة "Who has access"، غيرها من "Only myself" إلى **"Anyone"**.
    * اضغط على زر "Deploy".
4.  **نسخ الرابط النهائي:**
    * انسخ "Web app URL" الجديد الذي ينتهي بـ `/exec` وضعه في ملف `js/state.js` في مشروعك.
*/


// ===============================================================
// ================ CONFIGURATION (تكوين) ========================
// ===============================================================
var USERS_SHEET_NAME = "Users";
var QUESTIONS_SHEET_NAME = "MCQ Bank";
var LECTURES_SHEET_NAME = "Lectures Topics";
var QUIZ_LOG_SHEET_NAME = "QuizLogs";
var LECTURE_LOG_SHEET_NAME = "LectureLogs";
var QUIZ_NOTES_SHEET_NAME = "UserQuizNotes";
var LECTURE_NOTES_SHEET_NAME = "UserLectureNotes";
var BOOKS_SHEET_NAME = "MCQBooks";
var USER_INCORRECT_QUESTIONS_SHEET_NAME = "UserIncorrectQuestions";
var ANNOUNCEMENTS_SHEET_NAME = "Announcements";
var OSCE_CASES_SHEET_NAME = "OSCE_Cases";
var OSCE_QUESTIONS_SHEET_NAME = "OSCE_Questions";
var OSCE_LOG_SHEET_NAME = "OSCELog";
var USERS_CARD_SHEET_NAME = "Users_Card";
var MESSENGER_SHEET_NAME = "Messenger";
var ROLES_SHEET_NAME = "Role";
var STUDY_PLANNER_SHEET_NAME = "Study_Planner";
var FREE_TEST_QUESTIONS_SHEET_NAME = "FreeTestMCQs";
var ANSWERED_QUESTIONS_LOG_SHEET_NAME = "AnsweredQuestionsLog";


// ===============================================================
// ================ MAIN FUNCTIONS (الوظائف الرئيسية) =============
// ===============================================================

function doGet(e) {
  try {
    var requestType = e.parameter.request;
    var userId = e.parameter.userId;
    var logId = e.parameter.logId;

    if (requestType === 'contentData') {
      return handleContentDataRequest();
    } else if (requestType === 'userData') {
      if (!userId) return createErrorResponse("userId parameter is required for userData request.");
      return handleUserDataRequest(userId);
    } 
    else if (requestType === 'getAllUserPlans') {
      if (!userId) return createErrorResponse("userId is required for getAllUserPlans request.");
      return handleGetAllUserPlans(userId);
    } 
    else if (requestType === 'getUserCardData') {
      if (!userId) return createErrorResponse("userId parameter is required for getUserCardData request.");
      return handleUserCardDataRequest(userId);
    } else if (requestType === 'reviewQuiz') {
      if (!logId || !userId) return createErrorResponse("logId and userId parameters are required for reviewQuiz request.");
      return handleReviewQuizRequest(logId, userId);
    } else if (requestType === 'leaderboard') {
      if (!userId) return createErrorResponse("userId parameter is required for leaderboard request.");
      return handleLeaderboardRequest(userId);
    } else if (requestType === 'getIncorrectQuestions') {
      if (!userId) return createErrorResponse("userId parameter is required for getIncorrectQuestions request.");
      return handleIncorrectQuestionsRequest(userId);
    } else if (requestType === 'getMessages') {
      if (!userId) return createErrorResponse("userId parameter is required for getMessages request.");
      return handleGetMessagesRequest(userId);
    } else {
      return HtmlService.createHtmlOutputFromFile('Index').setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
    }
  } catch (error) {
    Logger.log("doGet Error: " + error.toString() + "\nStack: " + error.stack);
    return createErrorResponse("An unexpected error occurred in doGet: " + error.toString());
  }
}

function doPost(e) {
  try {
    var data = JSON.parse(e.postData.contents);
    var eventType = data.eventType || 'N/A';
    var ss = SpreadsheetApp.getActiveSpreadsheet();

    if (eventType === 'createStudyPlan') {
        if (!data.userId || !data.planName || !data.startDate || !data.endDate || !data.studyPlan) return createErrorResponse("Missing data for createStudyPlan.");
        return handleCreateStudyPlan(ss, data);
    } else if (eventType === 'updateStudyPlan') {
        if (!data.planId || !data.studyPlan) return createErrorResponse("planId and studyPlan are required for update.");
        return handleUpdateStudyPlan(ss, data);
    } else if (eventType === 'activateStudyPlan') {
        if (!data.userId || !data.planId) return createErrorResponse("userId and planId are required for activation.");
        return handleActivateStudyPlan(ss, data);
    } else if (eventType === 'deleteStudyPlan') { 
        if (!data.planId) return createErrorResponse("planId is required for deletion.");
        return handleDeleteStudyPlan(ss, data);
    }
    else if (eventType === 'FinishQuiz') {
      // MODIFIED: Swapped "Details" and "AttemptedQuestions" to match the sheet
      var quizLogSheet = getOrCreateSheet(ss, QUIZ_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "QuizTitle", "Score", "TotalQuestions", "Details", "AttemptedQuestions"]);
      // MODIFIED: Swapped data.details and data.attemptedQuestions to match the sheet
      quizLogSheet.appendRow([ new Date(), data.userId, data.userName, eventType, data.quizTitle, data.score, data.totalQuestions, data.details, data.attemptedQuestions ]);
      
      var answeredSheet = getOrCreateSheet(ss, ANSWERED_QUESTIONS_LOG_SHEET_NAME, ["UserID", "QuestionID"]);
      var answeredData = sheetToJSON(answeredSheet);
      var userExistingAnswers = new Set(answeredData.filter(function(r) { return r.UserID === data.userId; }).map(function(r) { return r.QuestionID; }));
      var questionsInQuiz = JSON.parse(data.details);
      var newRows = [];
      
      questionsInQuiz.forEach(function(q) {
        // **CRITICAL LOGIC:** Only log a question to AnsweredQuestionsLog if it has a real answer (not 'No Answer')
        if (q.ans !== 'No Answer' && !userExistingAnswers.has(q.qID)) {
          newRows.push([data.userId, q.qID]);
          userExistingAnswers.add(q.qID);
        }
      });

      if (newRows.length > 0) {
        answeredSheet.getRange(answeredSheet.getLastRow() + 1, 1, newRows.length, 2).setValues(newRows);
      }
    }
    else if (eventType === 'login') {
      if (!data.username || !data.password) {
        return createJsonResponse({ success: false, message: "Username and password are required." });
      }
      return handleLogin(data.username, data.password);
    }
    else if (eventType === 'updateUserCardData') {
        if (!data.userId) return createErrorResponse("User ID is required to update card data.");
        return handleUpdateUserCard(ss, data);
    }
    else if (eventType === 'sendMessage') {
        if (!data.userId || !data.userName || !data.message) return createErrorResponse("User ID, User Name, and Message are required for sendMessage request.");
        return handleSendMessage(ss, data.userId, data.userName, data.message);
    }
    else if (eventType === 'FinishOSCEQuiz') { 
      var osceLogSheet = getOrCreateSheet(ss, OSCE_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "OSCETitle", "Score", "TotalQuestions", "Details", "OSCELogID"]);
      var osceLogId = "OSCELOG_" + new Date().getTime();
      osceLogSheet.appendRow([ new Date(), data.userId || 'N/A', data.userName || 'N/A', eventType, data.osceTitle || 'N/A', data.score !== undefined ? data.score : 'N/A', data.totalQuestions !== undefined ? data.totalQuestions : 'N/A', data.details || '[]', osceLogId ]);
    } else if (eventType === 'ViewLecture') {
      var lectureLogSheet = getOrCreateSheet(ss, LECTURE_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "LectureName"]);
      lectureLogSheet.appendRow([new Date(), data.userId || 'N/A', data.userName || 'N/A', eventType, data.lectureName || 'N/A']);
    } else if (eventType === 'saveQuizNote' || eventType === 'saveLectureNote') {
      var noteSheetName = eventType === 'saveQuizNote' ? QUIZ_NOTES_SHEET_NAME : LECTURE_NOTES_SHEET_NAME;
      var noteHeaders = eventType === 'saveQuizNote' ? ["UniqueID", "Timestamp", "UserID", "QuizID", "NoteText"] : ["UniqueID", "Timestamp", "UserID", "LectureID", "NoteText"];
      var notesSheet = getOrCreateSheet(ss, noteSheetName, noteHeaders);
      upsertNote(notesSheet, data);
    } else if (eventType === 'deleteQuizNote' || eventType === 'deleteLectureNote') {
      var noteSheetName = eventType === 'deleteQuizNote' ? QUIZ_NOTES_SHEET_NAME : LECTURE_NOTES_SHEET_NAME;
      var sheet = ss.getSheetByName(noteSheetName);
      if (sheet) {
        deleteNote(sheet, data.uniqueId);
      }
    } else if (eventType === 'clearQuizLogs' || eventType === 'clearLectureLogs' || eventType === 'clearAllLogs') {
        if (!data.userId) return createErrorResponse("User ID is required to clear logs.");
        if (eventType === 'clearQuizLogs' || eventType === 'clearAllLogs') clearUserLogs(ss, QUIZ_LOG_SHEET_NAME, data.userId);
        if (eventType === 'clearLectureLogs' || eventType === 'clearAllLogs') clearUserLogs(ss, LECTURE_LOG_SHEET_NAME, data.userId);
    } else if (eventType === 'logIncorrectAnswer') {
        upsertIncorrectQuestion(ss, data);
    } else if (eventType === 'logCorrectedMistake') {
        markIncorrectAsCorrect(ss, data);
    } else {
      return createJsonResponse({ success: false, message: "Unknown event type: " + eventType });
    }
    
    return createJsonResponse({ success: true, message: "Action completed successfully." });
  } catch (error) {
    Logger.log("doPost Error: " + error.toString() + "\nStack: " + error.stack);
    return createErrorResponse("An unexpected error occurred in doPost: " + error.toString());
  }
}


// ===============================================================
// ================ HANDLER FUNCTIONS (وظائف المعالجة) ===========
// ===============================================================

// ... (Rest of the file is unchanged)
