// ===============================================================
// ================ CONFIGURATION (تكوين) ========================
// ===============================================================
var USERS_SHEET_NAME = "Users";
var QUESTIONS_SHEET_NAME = "MCQ Bank";
var LECTURES_SHEET_NAME = "Lectures Topics";
var QUIZ_LOG_SHEET_NAME = "QuizLogs";
var LECTURE_LOG_SHEET_NAME = "LectureLogs";
var QUIZ_NOTES_SHEET_NAME = "UserQuizNotes";
var LECTURE_NOTES_SHEET_NAME = "UserLectureNotes";
var BOOKS_SHEET_NAME = "MCQBooks";
var USER_INCORRECT_QUESTIONS_SHEET_NAME = "UserIncorrectQuestions";
var ANNOUNCEMENTS_SHEET_NAME = "Announcements";
var OSCE_CASES_SHEET_NAME = "OSCE_Cases";
var OSCE_QUESTIONS_SHEET_NAME = "OSCE_Questions";
var OSCE_LOG_SHEET_NAME = "OSCELog";
var USERS_CARD_SHEET_NAME = "Users_Card";
var MESSENGER_SHEET_NAME = "Messenger";
var ROLES_SHEET_NAME = "Role";
var STUDY_PLANNER_SHEET_NAME = "Study_Planner";
var FREE_TEST_QUESTIONS_SHEET_NAME = "FreeTestMCQs";
var ANSWERED_QUESTIONS_LOG_SHEET_NAME = "AnsweredQuestionsLog";
var THEORY_QUESTIONS_SHEET_NAME = "Theory_Questions";
var THEORY_LOG_SHEET_NAME = "Theory_Questions_Log";
var USERS_FINANCE_SHEET_NAME = "UsersFinance";
var TRIAL_PERIOD_HOURS = 24;

// ===============================================================
// ================ MAIN FUNCTIONS (الوظائف الرئيسية) =============
// ===============================================================

function doGet(e) {
  try {
    var requestType = e.parameter.request;
    var userId = e.parameter.userId;
    var logId = e.parameter.logId;
    var adminUsername = e.parameter.username;
    var adminPassword = e.parameter.password;
    
    if (requestType === 'getUserRole') {
        if (!e.parameter.username) return createErrorResponse("Username parameter is required.");
        return handleGetUserRole(e.parameter.username);
    }

    if (requestType === 'adminData') {
      var adminCheck = verifyAdmin(adminUsername, adminPassword);
      if (!adminCheck.success) return createErrorResponse("Authentication failed.");
      return handleAdminDataRequest();
    }
    
    if (requestType === 'contentData') { return handleContentDataRequest();
    }
    else if (requestType === 'userData') { if (!userId) return createErrorResponse("userId parameter is required for userData request.");
    return handleUserDataRequest(userId); } 
    else if (requestType === 'getAllUserPlans') { if (!userId) return createErrorResponse("userId is required for getAllUserPlans request.");
    return handleGetAllUserPlans(userId); } 
    else if (requestType === 'getUserCardData') { if (!userId) return createErrorResponse("userId parameter is required for getUserCardData request.");
    return handleUserCardDataRequest(userId); }
    else if (requestType === 'reviewQuiz') { if (!logId || !userId) return createErrorResponse("logId and userId parameters are required for reviewQuiz request.");
    return handleReviewQuizRequest(logId, userId); }
    else if (requestType === 'leaderboard') { if (!userId) return createErrorResponse("userId parameter is required for leaderboard request.");
    return handleLeaderboardRequest(userId); }
    else if (requestType === 'getIncorrectQuestions') { if (!userId) return createErrorResponse("userId parameter is required for getIncorrectQuestions request.");
    return handleIncorrectQuestionsRequest(userId); }
    else if (requestType === 'getMessages') { if (!userId) return createErrorResponse("userId parameter is required for getMessages request.");
    return handleGetMessagesRequest(userId); }
    else { return HtmlService.createHtmlOutputFromFile('Index').setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
    }
  } catch (error) { Logger.log("doGet Error: " + error.toString() + "\nStack: " + error.stack);
  return createErrorResponse("An unexpected error occurred in doGet: " + error.toString());
  }
}

function doPost(e) {
  try {
    var data = JSON.parse(e.postData.contents);
    var eventType = data.eventType || 'N/A';
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    
    if (eventType === 'adminLogin') {
      var verificationResult = verifyAdmin(data.username, data.password);
      if (verificationResult.success) {
        return createJsonResponse({ success: true });
      } else {
        return createJsonResponse({ success: false, message: verificationResult.message });
      }
    }

    if (eventType.startsWith('admin_')) {
        var adminCheck = verifyAdmin(data.username, data.password);
        if (!adminCheck.success) return createErrorResponse("Authentication failed for admin action: " + adminCheck.message);

        if (eventType === 'admin_updateUser') return handleAdminUpdateUser(ss, data.userData);
        if (eventType === 'admin_addUser') return handleAdminAddUser(ss, data.userData);
        if (eventType === 'admin_replyToMessage') return handleAdminReply(ss, data.replyData);
        if (eventType === 'admin_addAnnouncement') return handleAdminAddAnnouncement(ss, data.announcementData);
        if (eventType === 'admin_deleteAnnouncement') return handleAdminDeleteAnnouncement(ss, data.announcementId);
        if (eventType === 'admin_toggleAnnouncementStatus') return handleAdminToggleAnnouncementStatus(ss, data.announcementId, data.status);
        if (eventType === 'admin_bulkUpdate') return handleAdminBulkUpdate(ss, data.updateData);
        if (eventType === 'admin_sendMessage') return handleAdminSendMessage(ss, data.messageData);
        if (eventType === 'admin_addPayment') return handleAdminAddPayment(ss, data.paymentData);
        if (eventType === 'admin_extendSubscription') return handleExtendSubscription(ss, data.extensionData);
    }
    
    if (eventType === 'registerUser') { return handleRegistration(ss, data);
    }
    else if (eventType === 'createStudyPlan') { if (!data.userId || !data.planName || !data.startDate || !data.endDate || !data.studyPlan) return createErrorResponse("Missing data for createStudyPlan.");
    return handleCreateStudyPlan(ss, data); }
    else if (eventType === 'updateStudyPlan') { if (!data.planId || !data.studyPlan) return createErrorResponse("planId and studyPlan are required for update.");
    return handleUpdateStudyPlan(ss, data); }
    else if (eventType === 'activateStudyPlan') { if (!data.userId || !data.planId) return createErrorResponse("userId and planId are required for activation.");
    return handleActivateStudyPlan(ss, data); }
    else if (eventType === 'deleteStudyPlan') { if (!data.planId) return createErrorResponse("planId is required for deletion.");
    return handleDeleteStudyPlan(ss, data); }
    else if (eventType === 'FinishQuiz') {
      var quizLogSheet = getOrCreateSheet(ss, QUIZ_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "QuizTitle", "Score", "TotalQuestions", "Details", "AttemptedQuestions"]);
      quizLogSheet.appendRow([ new Date(), data.userId, data.userName, eventType, data.quizTitle, data.score, data.totalQuestions, data.details, data.attemptedQuestions ]);
      var answeredSheet = getOrCreateSheet(ss, ANSWERED_QUESTIONS_LOG_SHEET_NAME, ["UserID", "QuestionID"]);
      var answeredData = sheetToJSON(answeredSheet);
      var userExistingAnswers = new Set(answeredData.filter(function(r) { return r.UserID === data.userId; }).map(function(r) { return r.QuestionID; }));
      var questionsInQuiz = JSON.parse(data.details);
      var newRows = [];
      questionsInQuiz.forEach(function(q) { if (q.ans !== 'No Answer' && !userExistingAnswers.has(q.qID)) { newRows.push([data.userId, q.qID]); userExistingAnswers.add(q.qID); } });
      if (newRows.length > 0) { answeredSheet.getRange(answeredSheet.getLastRow() + 1, 1, newRows.length, 2).setValues(newRows);
      }
    }
    else if (eventType === 'login') { if (!data.username || !data.password) { return createJsonResponse({ success: false, message: "Username and password are required." });
    } return handleLogin(data.username, data.password); }
    else if (eventType === 'updateUserCardData') { if (!data.userId) return createErrorResponse("User ID is required to update card data.");
    return handleUpdateUserCard(ss, data); }
    else if (eventType === 'sendMessage') { if (!data.userId || !data.userName || !data.message) return createErrorResponse("User ID, User Name, and Message are required for sendMessage request.");
    return handleSendMessage(ss, data.userId, data.userName, data.message); }
    else if (eventType === 'FinishOSCEQuiz') { 
      var osceLogSheet = getOrCreateSheet(ss, OSCE_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "OSCETitle", "Score", "TotalQuestions", "Details", "OSCELogID"]);
      var osceLogId = "OSCELOG_" + new Date().getTime();
      osceLogSheet.appendRow([ new Date(), data.userId || 'N/A', data.userName || 'N/A', eventType, data.osceTitle || 'N/A', data.score !== undefined ? data.score : 'N/A', data.totalQuestions !== undefined ? data.totalQuestions : 'N/A', data.details || '[]', osceLogId ]);
    } else if (eventType === 'ViewLecture') { var lectureLogSheet = getOrCreateSheet(ss, LECTURE_LOG_SHEET_NAME, ["Timestamp", "UserID", "UserName", "EventType", "LectureName"]);
    lectureLogSheet.appendRow([new Date(), data.userId || 'N/A', data.userName || 'N/A', eventType, data.lectureName || 'N/A']);
    }
    else if (eventType === 'saveQuizNote' || eventType === 'saveLectureNote') {
      var noteSheetName = eventType === 'saveQuizNote' ?
      QUIZ_NOTES_SHEET_NAME : LECTURE_NOTES_SHEET_NAME;
      var noteHeaders = eventType === 'saveQuizNote' ?
      ["UniqueID", "Timestamp", "UserID", "QuizID", "NoteText"] : ["UniqueID", "Timestamp", "UserID", "LectureID", "NoteText"];
      var notesSheet = getOrCreateSheet(ss, noteSheetName, noteHeaders);
      upsertNote(notesSheet, data);
    } else if (eventType === 'saveTheoryLog') { var theoryLogSheet = getOrCreateSheet(ss, THEORY_LOG_SHEET_NAME, ["Log_UniqueID", "User_ID", "Question_ID", "Status", "Notes", "Essay_Time_Stamp"]); upsertTheoryLog(theoryLogSheet, data);
    }
    else if (eventType === 'deleteQuizNote' || eventType === 'deleteLectureNote') { var noteSheetName = eventType === 'deleteQuizNote' ?
    QUIZ_NOTES_SHEET_NAME : LECTURE_NOTES_SHEET_NAME; var sheet = ss.getSheetByName(noteSheetName); if (sheet) { deleteNote(sheet, data.uniqueId);
    }
    } else if (eventType === 'clearQuizLogs' || eventType === 'clearLectureLogs' || eventType === 'clearAllLogs') {
        if (!data.userId) return createErrorResponse("User ID is required to clear logs.");
        if (eventType === 'clearQuizLogs' || eventType === 'clearAllLogs') clearUserLogs(ss, QUIZ_LOG_SHEET_NAME, data.userId);
        if (eventType === 'clearLectureLogs' || eventType === 'clearAllLogs') clearUserLogs(ss, LECTURE_LOG_SHEET_NAME, data.userId);
    } else if (eventType === 'logIncorrectAnswer') { upsertIncorrectQuestion(ss, data);
    }
    else if (eventType === 'logCorrectedMistake') { markIncorrectAsCorrect(ss, data);
    }
    else { return createJsonResponse({ success: false, message: "Unknown event type: " + eventType });
    }
    return createJsonResponse({ success: true, message: "Action completed successfully." });
  } catch (error) { Logger.log("doPost Error: " + error.toString() + "\nStack: " + error.stack);
  return createErrorResponse("An unexpected error occurred in doPost: " + error.toString());
  }
}

// ===============================================================
// ================ HELPER & VERIFICATION FUNCTIONS ==============
// ===============================================================

function verifyAdmin(username, password) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SHEET_NAME);
    if (!sheet) return { success: false, message: "System Error: Users sheet not found." };
    var data = sheet.getDataRange().getValues();
    var headers = data.shift();
    var usernameCol = headers.indexOf("Username");
    var passwordCol = headers.indexOf("Password");
    var roleCol = headers.indexOf("Role");
    if (usernameCol === -1 || passwordCol === -1 || roleCol === -1) return { success: false, message: "System Error: Columns misconfigured." };
    if (!username) return { success: false, message: "Username was not provided." };
    var userRow = null;
    for (var i = 0; i < data.length; i++) {
        if (String(data[i][usernameCol]).trim().toLowerCase() === username.trim().toLowerCase()) {
            userRow = data[i];
            break;
        }
    }
    if (!userRow) return { success: false, message: `User '${username}' not found.` };
    var userRole = String(userRow[roleCol]).trim();
    if (userRole !== 'Admin') return { success: false, message: `User '${username}' is confirmed, but is not an Admin.` };
    var sheetPassword = String(userRow[passwordCol]).trim();
    var userPassword = String(password || "").trim();
    if (sheetPassword === userPassword) return { success: true };
    else return { success: false, message: 'Password incorrect.' };
  } catch (e) {
    Logger.log("Error in verifyAdmin: " + e.toString());
    return { success: false, message: "An unexpected server error occurred." };
  }
}

// ===============================================================
// ================ HANDLER FUNCTIONS (وظائف المعالجة) ===========
// ===============================================================

function handleExtendSubscription(ss, data) {
    try {
        var { UniqueID, extendValue, extendUnit, Payment, PaymentMethod, PaymentNotes } = data;
        if (!UniqueID || !extendValue || !extendUnit) {
            return createErrorResponse("Missing data for subscription extension.");
        }

        var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
        if (!usersSheet) return createErrorResponse("Users sheet not found.");

        var range = usersSheet.getDataRange();
        var values = range.getValues();
        var headers = values[0];
        var uniqueIdCol = headers.indexOf("UniqueID");
        var endDateCol = headers.indexOf("SubscriptionEndDate");
        var userRowIndex = -1;

        for (var i = 1; i < values.length; i++) {
            if (values[i][uniqueIdCol] === UniqueID) {
                userRowIndex = i;
                break;
            }
        }

        if (userRowIndex === -1) {
            return createErrorResponse("User not found for extension.");
        }

        var currentEndDate = values[userRowIndex][endDateCol] ? new Date(values[userRowIndex][endDateCol]) : new Date();
        var startDate = (currentEndDate < new Date()) ? new Date() : currentEndDate;

        var newEndDate = new Date(startDate);
        var numValue = parseInt(extendValue, 10);
        if (extendUnit === 'days') newEndDate.setDate(newEndDate.getDate() + numValue);
        else if (extendUnit === 'weeks') newEndDate.setDate(newEndDate.getDate() + (numValue * 7));
        else if (extendUnit === 'months') newEndDate.setMonth(newEndDate.getMonth() + numValue);
        
        usersSheet.getRange(userRowIndex + 1, endDateCol + 1).setValue(newEndDate);

        if (Payment && parseFloat(Payment) > 0) {
            handleAdminAddPayment(ss, {
                UniqueID: UniqueID,
                Payment: Payment,
                PaymentMethod: PaymentMethod,
                PaymentNotes: PaymentNotes || "Subscription Extension"
            });
        }
        
        return createJsonResponse({ success: true, message: `Subscription extended successfully.` });

    } catch(e) {
        Logger.log("Error in handleExtendSubscription: " + e.toString());
        return createErrorResponse("An error occurred during extension.");
    }
}

function handleAdminBulkUpdate(ss, updateData) {
    var userIds = updateData.userIds;
    var action = updateData.action;
    var value = updateData.value;
    if (!userIds || !action || value === undefined || userIds.length === 0) {
        return createErrorResponse("Missing data for bulk update.");
    }
    var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
    if (!usersSheet) return createErrorResponse("Users sheet not found.");
    var range = usersSheet.getDataRange();
    var values = range.getValues();
    var headers = values[0];
    var columnToUpdate;
    if (action === "changeRole") {
      columnToUpdate = "Role";
    } else if (action === "changeAccess") {
      columnToUpdate = "AccessGranted";
      value = (value === 'TRUE' || value === true);
    }
    else return createErrorResponse("Invalid bulk action.");
    var colIndex = headers.indexOf(columnToUpdate);
    var uniqueIdCol = headers.indexOf("UniqueID");
    if (colIndex === -1 || uniqueIdCol === -1) {
        return createErrorResponse("Required columns not found in Users sheet.");
    }
    var updatedCount = 0;
    var userIdsSet = new Set(userIds);
    for (var i = 1; i < values.length; i++) {
        if (userIdsSet.has(values[i][uniqueIdCol])) {
            values[i][colIndex] = value;
            updatedCount++;
        }
    }
    if (updatedCount > 0) {
        range.setValues(values);
        return createJsonResponse({ success: true, message: `Successfully updated ${updatedCount} users.` });
    } else {
        return createErrorResponse("No matching users found to update.");
    }
}

function handleAdminSendMessage(ss, messageData) {
    var userId = messageData.userId;
    var message = messageData.message;
    if (!userId || !message) return createErrorResponse("Missing userId or message text.");
    var messengerSheet = getOrCreateSheet(ss, MESSENGER_SHEET_NAME, ["Timestamp", "UserID", "UserName", "UserMessage", "AdminReply"]);
    var now = new Date();
    if (userId === "BROADCAST_ALL") {
        var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
        if (!usersSheet) return createErrorResponse("Users sheet not found for broadcast.");
        var users = sheetToJSON(usersSheet);
        var newRows = [];
        for (var i = 0; i < users.length; i++) {
            if (users[i].Role !== 'Admin') {
                 newRows.push([now, users[i].UniqueID, users[i].Name, "", message]);
            }
        }
        if (newRows.length > 0) {
             messengerSheet.getRange(messengerSheet.getLastRow() + 1, 1, newRows.length, 5).setValues(newRows);
        }
        return createJsonResponse({ success: true, message: `Broadcast sent to ${newRows.length} users.` });
    } else {
        var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
        var users = sheetToJSON(usersSheet);
        var user = users.find(function(u) { return u.UniqueID === userId; });
        var userName = user ? user.Name : 'N/A';
        messengerSheet.appendRow([now, userId, userName, "", message]);
        return createJsonResponse({ success: true, message: `Message sent to ${userName}.` });
    }
}

function handleAdminAddPayment(ss, paymentData) {
    var { UniqueID, Payment, PaymentMethod, PaymentNotes } = paymentData;
    if (!UniqueID || !Payment || !PaymentMethod) {
        return createErrorResponse("Missing required payment data (UniqueID, Payment, PaymentMethod).");
    }
    var financeSheet = getOrCreateSheet(ss, USERS_FINANCE_SHEET_NAME, ["UniqueID", "Username", "PaymentTimeStamp", "PaymentNotes", "Exam Results", "Payment", "PaymentMethod"]);
    var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
    if (!usersSheet) return createErrorResponse("Users sheet not found.");
    var users = sheetToJSON(usersSheet);
    var user = users.find(function(u) { return u.UniqueID === UniqueID; });
    var username = user ? user.Username : 'N/A';
    financeSheet.appendRow([UniqueID, username, new Date(), PaymentNotes || "", "", Payment, PaymentMethod]);
    return createJsonResponse({ success: true, message: `Payment of ${Payment} for ${username} recorded.` });
}


function handleGetUserRole(username) {
  try {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SHEET_NAME);
    if (!sheet) return createJsonResponse({ found: false, role: 'Sheet not found' });
    var data = sheet.getDataRange().getValues();
    var headers = data.shift();
    var usernameCol = headers.indexOf("Username");
    var roleCol = headers.indexOf("Role");
    if (usernameCol === -1 || roleCol === -1) return createJsonResponse({ found: false, role: 'Columns not found' });
    for (var i = 0; i < data.length; i++) {
      var row = data[i];
      var sheetUsername = String(row[usernameCol] || '').trim();
      if (sheetUsername.toLowerCase() === username.toLowerCase()) {
        var sheetRole = String(row[roleCol] || '').trim();
        return createJsonResponse({ found: true, role: sheetRole || 'No Role Assigned' });
      }
    }
    return createJsonResponse({ found: false, role: 'User Not Found' });
  } catch (e) {
    Logger.log("Error in handleGetUserRole: " + e.toString());
    return createErrorResponse(e.toString());
  }
}

function handleAdminDataRequest() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var data = {
    users: sheetToJSON(ss.getSheetByName(USERS_SHEET_NAME)),
    messages: sheetToJSON(ss.getSheetByName(MESSENGER_SHEET_NAME)),
    logs: sheetToJSON(ss.getSheetByName(QUIZ_LOG_SHEET_NAME)),
    announcements: sheetToJSON(ss.getSheetByName(ANNOUNCEMENTS_SHEET_NAME)),
    finances: sheetToJSON(ss.getSheetByName(USERS_FINANCE_SHEET_NAME)),
    roles: sheetToJSON(ss.getSheetByName(ROLES_SHEET_NAME)),
    questions: sheetToJSON(ss.getSheetByName(QUESTIONS_SHEET_NAME)),
    incorrectQuestions: sheetToJSON(ss.getSheetByName(USER_INCORRECT_QUESTIONS_SHEET_NAME))
  };
  return createJsonResponse(data);
}

function handleAdminUpdateUser(ss, userData) {
    var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
    if (!usersSheet) return createErrorResponse("Users sheet not found.");
    var values = usersSheet.getDataRange().getValues();
    var headers = values.shift();
    var uniqueIdCol = headers.indexOf("UniqueID");
    for (var i = 0; i < values.length; i++) {
        if (values[i][uniqueIdCol] === userData.UniqueID) {
            var rowNum = i + 2;
            if (userData.Role !== undefined) usersSheet.getRange(rowNum, headers.indexOf("Role") + 1).setValue(userData.Role);
            if (userData.SubscriptionEndDate !== undefined) usersSheet.getRange(rowNum, headers.indexOf("SubscriptionEndDate") + 1).setValue(userData.SubscriptionEndDate || "");
            if (userData.AccessGranted !== undefined) usersSheet.getRange(rowNum, headers.indexOf("AccessGranted") + 1).setValue(userData.AccessGranted === 'TRUE' || userData.AccessGranted === true);
            var adminNotesCol = headers.indexOf("AdminNotes");
            if(adminNotesCol !== -1 && userData.AdminNotes !== undefined) {
               usersSheet.getRange(rowNum, adminNotesCol + 1).setValue(userData.AdminNotes);
            }
            return createJsonResponse({ success: true, message: "User updated." });
        }
    }
    return createErrorResponse("User not found for update.");
}

function handleAdminAddUser(ss, userData) {
    var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
    if (!usersSheet) return createErrorResponse("Users sheet not found.");
    var existingUsers = usersSheet.getDataRange().getValues();
    var headers = existingUsers.shift();
    var usernameCol = headers.indexOf("Username");
    var usernameExists = existingUsers.some(function(row) {
        return row[usernameCol].toLowerCase() === userData.Username.toLowerCase();
    });
    if (usernameExists) return createJsonResponse({ success: false, message: "Username already exists." });
    
    var now = new Date();
    var newRowData = headers.map(function(header) { return userData[header] || ""; });
    var uniqueId = "UID_" + now.getTime();
    newRowData[headers.indexOf("UniqueID")] = uniqueId;
    newRowData[headers.indexOf("AdditionTimeStamp")] = now;
    newRowData[headers.indexOf("AccessGranted")] = true;

    usersSheet.appendRow(newRowData);

    if (userData.Payment && parseFloat(userData.Payment) > 0) {
        handleAdminAddPayment(ss, {
            UniqueID: uniqueId,
            Payment: userData.Payment,
            PaymentMethod: userData.PaymentMethod,
            PaymentNotes: "Initial subscription"
        });
    }
    return createJsonResponse({ success: true, message: "User added successfully." });
}

function handleAdminReply(ss, replyData) {
    var messengerSheet = ss.getSheetByName(MESSENGER_SHEET_NAME);
    if (!messengerSheet) return createErrorResponse("Messenger sheet not found.");
    var values = messengerSheet.getDataRange().getValues();
    var headers = values.shift();
    var userIdCol = headers.indexOf("UserID");
    var replyCol = headers.indexOf("AdminReply");
    for (var i = values.length - 1; i >= 0; i--) {
        if (values[i][userIdCol] === replyData.UserID && !values[i][replyCol]) {
            messengerSheet.getRange(i + 2, replyCol + 1).setValue(replyData.AdminReply);
            return createJsonResponse({ success: true, message: "Reply sent." });
        }
    }
    messengerSheet.appendRow([new Date(), replyData.UserID, "", "", replyData.AdminReply]);
    return createJsonResponse({ success: true, message: "Reply sent as a new message." });
}

function handleAdminAddAnnouncement(ss, annData) {
    var annSheet = getOrCreateSheet(ss, ANNOUNCEMENTS_SHEET_NAME, ["UniqueID", "TimeStamp", "UpdateMessage", "IsActive"]);
    var uniqueId = "ANN_" + new Date().getTime();
    annSheet.appendRow([uniqueId, new Date(), annData.message, annData.isActive]);
    return createJsonResponse({ success: true, message: "Announcement added." });
}

function handleAdminDeleteAnnouncement(ss, annId) {
    var annSheet = ss.getSheetByName(ANNOUNCEMENTS_SHEET_NAME);
    if (!annSheet) return createErrorResponse("Announcements sheet not found.");
    var values = annSheet.getDataRange().getValues();
    var uniqueIdCol = values[0].indexOf("UniqueID");
    for (var i = values.length - 1; i > 0; i--) {
        if (values[i][uniqueIdCol] === annId) {
            annSheet.deleteRow(i + 1);
            return createJsonResponse({ success: true, message: "Announcement deleted." });
        }
    }
    return createErrorResponse("Announcement not found.");
}

function handleAdminToggleAnnouncementStatus(ss, annId, status) {
    var annSheet = ss.getSheetByName(ANNOUNCEMENTS_SHEET_NAME);
    if (!annSheet) return createErrorResponse("Announcements sheet not found.");
    var values = annSheet.getDataRange().getValues();
    var headers = values[0];
    var uniqueIdCol = headers.indexOf("UniqueID");
    var activeCol = headers.indexOf("IsActive");
    for (var i = 1; i < values.length; i++) {
        if (values[i][uniqueIdCol] === annId) {
            annSheet.getRange(i + 1, activeCol + 1).setValue(status);
            return createJsonResponse({ success: true, message: "Status updated." });
        }
    }
    return createErrorResponse("Announcement not found.");
}

function handleRegistration(ss, data) {
    var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
    if (!usersSheet) return createErrorResponse("Users sheet not found. Cannot register.");
    var existingUsers = usersSheet.getDataRange().getValues();
    var headers = existingUsers.shift();
    var usernameCol = headers.indexOf("Username");
    var usernameExists = existingUsers.some(function(row) {
        return row[usernameCol].toLowerCase() === data.Username.toLowerCase();
    });
    if (usernameExists) { return createJsonResponse({ success: false, message: "Username already exists. Please choose another one." });
    }
    var now = new Date();
    var expiryDate = new Date(now.getTime() + TRIAL_PERIOD_HOURS * 60 * 60 * 1000);
    var newRow = headers.map(function(header) {
        switch(header) {
            case "UniqueID": return "UID_" + now.getTime();
            case "Name": return data.Name;
            case "Username": return data.Username;
            case "Password": return data.Password;
            case "E-Mail": return data.Email;
            case "MobileNumber": return data.MobileNumber;
            case "Country": return data.Country;
            case "StudyType": return data.StudyType || "";
            case "ExamDate": return data.ExamDate || "";
            case "Role": return "Trial";
            case "AccessGranted": return true;
            case "AdditionTimeStamp": return now;
            case "SubscriptionEndDate": return expiryDate;
            default: return "";
        }
    });
    usersSheet.appendRow(newRow);
    return createJsonResponse({ success: true, message: "Registration successful! You can now log in." });
}

function deactivateAllUserPlans(ss, userId) {
    try {
        var plannerSheet = ss.getSheetByName(STUDY_PLANNER_SHEET_NAME);
        if (!plannerSheet) return; 
        var values = plannerSheet.getDataRange().getValues();
        var headers = values[0];
        var userIdCol = headers.indexOf("User_ID");
        var statusCol = headers.indexOf("Plan_Status");
        if (userIdCol === -1 || statusCol === -1) { Logger.log("Could not find User_ID or Plan_Status columns in Study_Planner sheet."); return;
        }
        for (var i = 1; i < values.length; i++) {
            if (String(values[i][userIdCol]).trim() === String(userId).trim()) {
                plannerSheet.getRange(i + 1, statusCol + 1).setValue('FALSE');
            }
        }
    } catch(e) { Logger.log("Error in deactivateAllUserPlans: " + e.toString());
    }
}

function handleUpdateStudyPlan(ss, data) {
  try {
    var plannerSheet = getOrCreateSheet(ss, STUDY_PLANNER_SHEET_NAME, ["User_ID", "Plan_Name", "Plan_StartDate", "Plan_EndDate", "Study_Plan_JSON", "Plan_ID", "Plan_TimeStamp", "Plan_Status"]);
    var values = plannerSheet.getDataRange().getValues();
    var headers = values[0];
    var planIdCol = headers.indexOf("Plan_ID");
    var planJsonCol = headers.indexOf("Study_Plan_JSON");
    if (planIdCol === -1 || planJsonCol === -1) { return createErrorResponse("Sheet is missing required columns.");
    }
    var rowFound = -1;
    for (var i = 1; i < values.length; i++) { if (String(values[i][planIdCol]).trim() === String(data.planId).trim()) { rowFound = i + 1;
    break; } }
    if (rowFound !== -1) {
      plannerSheet.getRange(rowFound, planJsonCol + 1).setValue(JSON.stringify(data.studyPlan));
      return createJsonResponse({ success: true, message: "Study plan updated." });
    } else { return createErrorResponse("Plan ID not found.");
    }
  } catch (error) { Logger.log("handleUpdateStudyPlan Error: " + error.toString()); return createErrorResponse("Failed to update study plan: " + error.toString());
  }
}

function handleDeleteStudyPlan(ss, data) {
    try {
      var plannerSheet = ss.getSheetByName(STUDY_PLANNER_SHEET_NAME);
      if (!plannerSheet) return createErrorResponse("Study_Planner sheet not found.");
      var values = plannerSheet.getDataRange().getValues();
      var headers = values[0];
      var planIdCol = headers.indexOf("Plan_ID");
      if (planIdCol === -1) { return createErrorResponse("Plan_ID column not found in Study_Planner sheet.");
      }
      for (var i = values.length - 1; i > 0; i--) {
        if (String(values[i][planIdCol]).trim() === String(data.planId).trim()) {
          plannerSheet.deleteRow(i + 1);
          return createJsonResponse({ success: true, message: "Plan deleted successfully." });
        }
      }
      return createErrorResponse("Plan ID not found for deletion.");
    } catch (error) { Logger.log("handleDeleteStudyPlan Error: " + error.toString()); return createErrorResponse("Failed to delete study plan: " + error.toString());
    }
}

function handleGetAllUserPlans(userId) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var plannerSheet = getOrCreateSheet(ss, STUDY_PLANNER_SHEET_NAME, ["User_ID", "Plan_Name", "Plan_StartDate", "Plan_EndDate", "Study_Plan_JSON", "Plan_ID", "Plan_TimeStamp", "Plan_Status"]);
    var allPlans = sheetToJSON(plannerSheet);
    var userPlans = allPlans.filter(function(row) { return row.User_ID === userId; });
    userPlans.forEach(function(plan) { try { plan.Study_Plan = JSON.parse(plan.Study_Plan_JSON || '[]'); } catch (e) { plan.Study_Plan = []; } });
    return createJsonResponse({ success: true, plans: userPlans });
  } catch (error) { Logger.log("handleGetAllUserPlans Error: " + error.toString());
  return createErrorResponse("Failed to retrieve study plans: " + error.toString()); }
}

function handleCreateStudyPlan(ss, data) {
    try {
        var plannerSheet = getOrCreateSheet(ss, STUDY_PLANNER_SHEET_NAME, ["User_ID", "Plan_Name", "Plan_StartDate", "Plan_EndDate", "Study_Plan_JSON", "Plan_ID", "Plan_TimeStamp", "Plan_Status"]);
        var planId = "PLAN_" + new Date().getTime();
        var now = new Date();
        deactivateAllUserPlans(ss, data.userId);
        var newRow = [ data.userId, data.planName, new Date(data.startDate), new Date(data.endDate), JSON.stringify(data.studyPlan), planId, now, 'TRUE' ];
        plannerSheet.appendRow(newRow);
        return createJsonResponse({ success: true, message: "Plan created successfully.", newPlanId: planId });
    } catch (error) { Logger.log("handleCreateStudyPlan Error: " + error.toString());
    return createErrorResponse("Failed to create study plan: " + error.toString()); }
}

function handleActivateStudyPlan(ss, data) {
    try {
        deactivateAllUserPlans(ss, data.userId);
        var plannerSheet = ss.getSheetByName(STUDY_PLANNER_SHEET_NAME);
        var values = plannerSheet.getDataRange().getValues();
        var headers = values[0];
        var planIdCol = headers.indexOf("Plan_ID");
        var statusCol = headers.indexOf("Plan_Status");
        var rowFound = -1;
        for (var i = 1; i < values.length; i++) { if (String(values[i][planIdCol]).trim() === String(data.planId).trim()) { rowFound = i + 1;
        break; } }
        if (rowFound !== -1) {
            plannerSheet.getRange(rowFound, statusCol + 1).setValue('TRUE');
            return createJsonResponse({ success: true, message: "Plan activated." });
        } else { return createErrorResponse("Plan to activate not found.");
        }
    } catch (error) { Logger.log("handleActivateStudyPlan Error: " + error.toString());
    return createErrorResponse("Failed to activate study plan: " + error.toString()); }
}

function handleLogin(username, password) {
    var userResult = verifyUser(username, password);
    if (userResult.success) { return createJsonResponse({ success: true, user: userResult.userObject });
    }
    else { return createJsonResponse({ success: false, message: userResult.message });
    }
}

function handleContentDataRequest() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var data = {
    questions: sheetToJSON(ss.getSheetByName(QUESTIONS_SHEET_NAME)),
    lectures: sheetToJSON(ss.getSheetByName(LECTURES_SHEET_NAME)),
    books: sheetToJSON(ss.getSheetByName(BOOKS_SHEET_NAME)),
    announcements: getActiveAnnouncements(ss),
    osceCases: sheetToJSON(ss.getSheetByName(OSCE_CASES_SHEET_NAME)),
    osceQuestions: sheetToJSON(ss.getSheetByName(OSCE_QUESTIONS_SHEET_NAME)),
    roles: sheetToJSON(ss.getSheetByName(ROLES_SHEET_NAME)),
    freeTestQuestions: sheetToJSON(ss.getSheetByName(FREE_TEST_QUESTIONS_SHEET_NAME)),
    theoryQuestions: sheetToJSON(ss.getSheetByName(THEORY_QUESTIONS_SHEET_NAME))
  };
  return createJsonResponse(data);
}

function handleUserDataRequest(userId) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var answeredSheet = getOrCreateSheet(ss, ANSWERED_QUESTIONS_LOG_SHEET_NAME, ["UserID", "QuestionID"]);
  var answeredData = sheetToJSON(answeredSheet);
  var userAnsweredIds = answeredData.filter(function(r) { return r.UserID === userId; }).map(function(r) { return r.QuestionID; });
  var data = {
    logs: getLogsForUser(ss, userId),
    quizNotes: getNotesForUser(ss, QUIZ_NOTES_SHEET_NAME, userId),
    lectureNotes: getNotesForUser(ss, LECTURE_NOTES_SHEET_NAME, userId),
    answeredQuestions: userAnsweredIds,
    theoryLogs: getNotesForUser(ss, THEORY_LOG_SHEET_NAME, userId)
  };
  return createJsonResponse(data);
}

function handleUserCardDataRequest(userId) {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var cardSheet = getOrCreateSheet(ss, USERS_CARD_SHEET_NAME, ["UniqueID", "Name", "Nickname", "ExamDate", "Age", "StudyType", "QuizScore", "User_Img"]);
    var cardData = sheetToJSON(cardSheet);
    var userData = cardData.find(function(row) { return row.UniqueID === userId; });
    if (!userData) {
        var usersSheet = ss.getSheetByName(USERS_SHEET_NAME);
        if (!usersSheet) return createErrorResponse("Users sheet not found.");
        var allUsers = sheetToJSON(usersSheet);
        var mainUser = allUsers.find(function(u) { return u.UniqueID === userId; });
        if (!mainUser) return createErrorResponse("User not found in main user list.");
        var newRowData = [userId, mainUser.Name, "", "", "", "", 0, ""];
        cardSheet.appendRow(newRowData);
        userData = { UniqueID: userId, Name: mainUser.Name, Nickname: "", ExamDate: "", Age: "", StudyType: "", QuizScore: 0, User_Img: "" };
    }
    var quizLogSheet = ss.getSheetByName(QUIZ_LOG_SHEET_NAME);
    var totalScore = 0;
    if (quizLogSheet) {
        var logData = sheetToJSON(quizLogSheet);
        logData.forEach(function(log) { if (log.UserID === userId && log.Score) { totalScore += parseInt(log.Score, 10) || 0; } });
    }
    var values = cardSheet.getDataRange().getValues();
    var headers = values[0];
    var uniqueIdCol = headers.indexOf("UniqueID"), scoreCol = headers.indexOf("QuizScore");
    for (var i = 1; i < values.length; i++) { if (values[i][uniqueIdCol] === userId) { cardSheet.getRange(i + 1, scoreCol + 1).setValue(totalScore);
    break; } }
    userData.QuizScore = totalScore;
    return createJsonResponse({ success: true, cardData: userData });
}

function handleUpdateUserCard(ss, data) {
    var cardSheet = ss.getSheetByName(USERS_CARD_SHEET_NAME);
    if (!cardSheet) return createErrorResponse("Users_Card sheet not found.");
    var values = cardSheet.getDataRange().getValues();
    var headers = values.shift();
    var uniqueIdCol = headers.indexOf("UniqueID"), nicknameCol = headers.indexOf("Nickname"), examDateCol = headers.indexOf("ExamDate"), userImgCol = headers.indexOf("User_Img");
    for (var i = 0; i < values.length; i++) {
        if (values[i][uniqueIdCol] === data.userId) {
            var rowNum = i + 2;
            if (data.nickname !== undefined) cardSheet.getRange(rowNum, nicknameCol + 1).setValue(data.nickname);
            if (data.examDate !== undefined) cardSheet.getRange(rowNum, examDateCol + 1).setValue(data.examDate);
            if (data.userImg !== undefined) cardSheet.getRange(rowNum, userImgCol + 1).setValue(data.userImg);
            return createJsonResponse({ success: true, message: "User card updated." });
        }
    }
    return createErrorResponse("User not found in Users_Card sheet for update.");
}

function handleReviewQuizRequest(logId, userId) {
    try {
        var ss = SpreadsheetApp.getActiveSpreadsheet();
        var quizLogSheet = ss.getSheetByName(QUIZ_LOG_SHEET_NAME);
        if (!quizLogSheet) return createErrorResponse("Quiz log sheet not found.");
        var logData = quizLogSheet.getDataRange().getValues();
        var logHeaders = logData.shift();
        var timestampCol = logHeaders.indexOf("Timestamp"), userIdCol = logHeaders.indexOf("UserID"), detailsCol = logHeaders.indexOf("Details");
        var quizDetailsStr = null, quizLogFound = false;
        for (var i = 0; i < logData.length; i++) {
            var row = logData[i];
            if (String(row[userIdCol]) === String(userId) && new Date(row[timestampCol]).toISOString() === new Date(logId).toISOString()) {
                quizDetailsStr = row[detailsCol];
                quizLogFound = true;
                break;
            }
        }
        if (!quizLogFound) return createErrorResponse("Quiz log not found for the specified user and ID.");
        var quizDetails = JSON.parse(quizDetailsStr);
        var allQuestions = sheetToJSON(ss.getSheetByName(QUESTIONS_SHEET_NAME));
        var questionsMap = allQuestions.reduce(function(map, q) { map[q.UniqueID] = q; return map; }, {});
        var reviewQuestions = quizDetails.map(function(detail) {
            var fullQuestion = questionsMap[detail.qID];
            if (fullQuestion) { return { question: fullQuestion, userAnswer: detail.ans }; }
            return null;
        }).filter(function(q) { return q !== null; });
        return createJsonResponse({ success: true, reviewData: reviewQuestions });
    } catch (error) { Logger.log("handleReviewQuizRequest Error: " + error.toString());
    return createErrorResponse("Failed to retrieve quiz for review: " + error.toString());
    }
}

function handleLeaderboardRequest(currentUserId) {
    try {
        var ss = SpreadsheetApp.getActiveSpreadsheet();
        var cardSheet = getOrCreateSheet(ss, USERS_CARD_SHEET_NAME, ["UniqueID", "Name", "Nickname", "ExamDate", "Age", "StudyType", "QuizScore", "User_Img"]);
        var cardData = sheetToJSON(cardSheet).filter(function(user) { return user.Name && user.Name !== 'N/A' && user.Name !== 'Guest'; });
        cardData.sort(function(a, b) { return (b.QuizScore || 0) - (a.QuizScore || 0); });
        var currentUserRankData = null, top10Public = [];
        cardData.forEach(function(user, index) {
            var rank = index + 1;
            var displayName = (user.Nickname && user.Nickname.trim() !== '') ? user.Nickname : user.Name;
            if (rank <= 10) top10Public.push({ rank: rank, name: displayName });
            if (user.UniqueID === currentUserId) currentUserRankData = { rank: rank, name: displayName, score: user.QuizScore || 0 };
        });
        return createJsonResponse({ success: true, leaderboard: top10Public, currentUserRank: currentUserRankData });
    } catch (error) { Logger.log("handleLeaderboardRequest Error: " + error.toString());
    return createErrorResponse("Failed to retrieve leaderboard data: " + error.toString()); }
}

function handleIncorrectQuestionsRequest(userId) {
    try {
        var ss = SpreadsheetApp.getActiveSpreadsheet();
        var incorrectSheet = ss.getSheetByName(USER_INCORRECT_QUESTIONS_SHEET_NAME);
        if (!incorrectSheet) return createJsonResponse({ success: true, questions: [] });
        var incorrectData = sheetToJSON(incorrectSheet);
        var userMistakes = incorrectData.filter(function(row) { return row.UserID === userId && !row.CorrectTimestamp; });
        var questionIds = userMistakes.map(function(mistake) { return mistake.QuestionID; });
        if (questionIds.length === 0) return createJsonResponse({ success: true, questions: [] });
        var allQuestions = sheetToJSON(ss.getSheetByName(QUESTIONS_SHEET_NAME));
        var mistakeQuestions = allQuestions.filter(function(q) { return questionIds.indexOf(q.UniqueID) !== -1; });
        return createJsonResponse({ success: true, questions: mistakeQuestions });
    } catch (error) { Logger.log("handleIncorrectQuestionsRequest Error: " + error.toString()); return createErrorResponse("Failed to retrieve incorrect questions: " + error.toString());
    }
}

function handleGetMessagesRequest(userId) {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var messengerSheet = getOrCreateSheet(ss, MESSENGER_SHEET_NAME, ["Timestamp", "UserID", "UserName", "UserMessage", "AdminReply"]);
    var messagesData = sheetToJSON(messengerSheet);
    var userMessages = messagesData.filter(function(row) { return String(row.UserID) === String(userId); });
    userMessages.sort(function(a, b) { return new Date(a.Timestamp) - new Date(b.Timestamp); });
    return createJsonResponse({ success: true, messages: userMessages });
}

function handleSendMessage(ss, userId, userName, message) {
    var messengerSheet = getOrCreateSheet(ss, MESSENGER_SHEET_NAME, ["Timestamp", "UserID", "UserName", "UserMessage", "AdminReply"]);
    messengerSheet.appendRow([new Date(), userId, userName, message, ""]);
    return createJsonResponse({ success: true, message: "Message sent successfully." });
}

function verifyUser(username, password) {
    try {
        var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(USERS_SHEET_NAME);
        if (!sheet) { return { success: false, message: "System error: User database not found." };
        }
        var data = sheet.getDataRange().getValues();
        var headers = data.shift();
        var usernameCol = headers.indexOf("Username");
        var passwordCol = headers.indexOf("Password");
        var accessGrantedCol = headers.indexOf("AccessGranted");
        var expiryCol = headers.indexOf("SubscriptionEndDate");
        if (usernameCol === -1 || passwordCol === -1 || accessGrantedCol === -1) { return { success: false, message: "System error: User database is misconfigured."
        }; }
        for (var i = 0; i < data.length; i++) {
            var row = data[i];
            if (row[usernameCol].toLowerCase() === username.toLowerCase() && String(row[passwordCol]) === String(password)) {
                if (row[accessGrantedCol] !== true && String(row[accessGrantedCol]).toLowerCase() !== 'true') { return { success: false, message: "Your account is currently disabled. Please contact support."
                }; }
                var now = new Date();
                var expiryDate = new Date(row[expiryCol]);
                if (expiryDate && now > expiryDate) { return { success: false, message: "Your subscription or trial period has expired. Please contact support to renew."
                }; }
                var userObject = objectifyRow(row, headers);
                delete userObject.Password;
                return { success: true, userObject: userObject };
            }
        }
        return { success: false, message: "Invalid username or password."
        };
    } catch (error) { Logger.log("Error in verifyUser: " + error.toString());
    return { success: false, message: "An unexpected error occurred during login." };
    }
}

function getLogsForUser(ss, userId) {
  var quizSheet = ss.getSheetByName(QUIZ_LOG_SHEET_NAME);
  var lectureSheet = ss.getSheetByName(LECTURE_LOG_SHEET_NAME);
  var combinedLogs = [];
  if (quizSheet) {
    var quizData = sheetToJSON(quizSheet);
    quizData.forEach(function(rowObj) { if (rowObj.UserID === userId) { combinedLogs.push({ logId: new Date(rowObj.Timestamp).toISOString(), timestamp: rowObj.Timestamp, eventType: rowObj.EventType, title: rowObj.QuizTitle, score: rowObj.Score, total: rowObj.TotalQuestions, isReviewable: rowObj.Details && rowObj.Details.length > 2, Details: rowObj.Details }); } });
  }
  if (lectureSheet) {
    var lectureData = sheetToJSON(lectureSheet);
    lectureData.forEach(function(rowObj) { if (rowObj.UserID === userId) { combinedLogs.push({ timestamp: rowObj.Timestamp, eventType: rowObj.EventType, title: rowObj.LectureName }); } });
  }
  combinedLogs.sort(function(a, b) { return new Date(b.timestamp) - new Date(a.timestamp); });
  return combinedLogs;
}

function getNotesForUser(ss, sheetName, userId) {
    var notesSheet = ss.getSheetByName(sheetName);
    var userNotes = [];
    if (notesSheet) {
        var notesData = sheetToJSON(notesSheet);
        notesData.forEach(function(rowObj) { if (rowObj.UserID === userId || rowObj.User_ID === userId) { userNotes.push(rowObj); } });
    }
    return userNotes;
}

function upsertNote(sheet, data) {
  var uniqueId = data.uniqueId;
  var values = sheet.getDataRange().getValues();
  var headers = values[0];
  var noteColIndex = headers.indexOf("NoteText"), timeColIndex = headers.indexOf("Timestamp"), uniqueIdColIndex = headers.indexOf("UniqueID");
  var rowFound = false;
  for (var i = 1; i < values.length; i++) {
    if (values[i][uniqueIdColIndex] === uniqueId) {
      sheet.getRange(i + 1, noteColIndex + 1).setValue(data.noteText);
      sheet.getRange(i + 1, timeColIndex + 1).setValue(new Date());
      rowFound = true;
      break;
    }
  }
  if (!rowFound) {
    var newRowData = headers.map(function(header) {
      if (header === "UniqueID") return uniqueId;
      if (header === "Timestamp") return new Date();
      if (header === "UserID") return data.userId;
      if (header === "NoteText") return data.noteText;
      if (header === "QuizID" || header === "LectureID") return data.itemId;
      return "";
    });
    sheet.appendRow(newRowData);
  }
}

function upsertTheoryLog(sheet, data) {
  var logUniqueId = data.logUniqueId;
  var values = sheet.getDataRange().getValues();
  var headers = values[0];
  var logIdCol = headers.indexOf("Log_UniqueID");
  var rowFound = -1;
  for (var i = 1; i < values.length; i++) { if (values[i][logIdCol] === logUniqueId) { rowFound = i + 1;
  break; } }
  var now = new Date();
  if (rowFound !== -1) {
    for (var j = 0; j < headers.length; j++) {
      var header = headers[j];
      if (data[header] !== undefined) { sheet.getRange(rowFound, j + 1).setValue(data[header]); }
      if (header === "Essay_Time_Stamp") { sheet.getRange(rowFound, j + 1).setValue(now);
      }
    }
  } else {
    var newRowData = headers.map(function(header) {
        if (header === "Log_UniqueID") return logUniqueId;
        if (header === "User_ID") return data.userId;
        if (header === "Question_ID") return data.questionId;
        if (header === "Essay_Time_Stamp") return now;
        return data[header] || "";
    });
    sheet.appendRow(newRowData);
  }
}

function deleteNote(sheet, uniqueId) {
  var values = sheet.getDataRange().getValues();
  var uniqueIdColIndex = values[0].indexOf("UniqueID");
  for (var i = values.length - 1; i > 0; i--) { if (values[i][uniqueIdColIndex] === uniqueId) { sheet.deleteRow(i + 1);
  break; } }
}

function clearUserLogs(ss, sheetName, userId) {
    var sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var userIdCol = headers.indexOf("UserID");
    if (userIdCol === -1) return;
    for (var i = data.length - 1; i > 0; i--) { if (data[i][userIdCol] === userId) { sheet.deleteRow(i + 1);
    } }
}

function upsertIncorrectQuestion(ss, data) {
    var sheet = getOrCreateSheet(ss, USER_INCORRECT_QUESTIONS_SHEET_NAME, ["UniqueID", "UserID", "QuestionID", "UserAnswer", "WrongCount", "CorrectTimestamp", "LastUpdate"]);
    var values = sheet.getDataRange().getValues();
    var headers = values.shift();
    var uniqueIdCol = headers.indexOf("UniqueID"), wrongCountCol = headers.indexOf("WrongCount"), userAnswerCol = headers.indexOf("UserAnswer"), lastUpdateCol = headers.indexOf("LastUpdate");
    var uniqueId = `${data.userId}_${data.questionId}`, now = new Date(), rowFound = -1;
    for (var i = 0; i < values.length; i++) { if (values[i][uniqueIdCol] === uniqueId) { rowFound = i + 2;
    break; } }
    if (rowFound !== -1) {
        var currentWrongCount = parseInt(sheet.getRange(rowFound, wrongCountCol + 1).getValue(), 10) ||
        0;
        sheet.getRange(rowFound, wrongCountCol + 1).setValue(currentWrongCount + 1);
        sheet.getRange(rowFound, userAnswerCol + 1).setValue(data.userAnswer);
        sheet.getRange(rowFound, lastUpdateCol + 1).setValue(now);
    } else { sheet.appendRow([uniqueId, data.userId, data.questionId, data.userAnswer, 1, "", now]);
    }
}

function markIncorrectAsCorrect(ss, data) {
    var sheet = ss.getSheetByName(USER_INCORRECT_QUESTIONS_SHEET_NAME);
    if (!sheet) return;
    var values = sheet.getDataRange().getValues();
    var headers = values.shift();
    var uniqueIdCol = headers.indexOf("UniqueID"), correctTimestampCol = headers.indexOf("CorrectTimestamp"), lastUpdateCol = headers.indexOf("LastUpdate");
    var uniqueId = `${data.userId}_${data.questionId}`, now = new Date();
    for (var i = 0; i < values.length; i++) {
        if (values[i][uniqueIdCol] === uniqueId) {
            var rowNum = i + 2;
            sheet.getRange(rowNum, correctTimestampCol + 1).setValue(now);
            sheet.getRange(rowNum, lastUpdateCol + 1).setValue(now);
            break;
        }
    }
}

function getActiveAnnouncements(ss) {
  try {
    var sheet = ss.getSheetByName(ANNOUNCEMENTS_SHEET_NAME);
    if (!sheet) return [];
    var data = sheetToJSON(sheet);
    var activeAnnouncements = data.filter(function(row) { return String(row.IsActive).toUpperCase() === 'TRUE'; });
    activeAnnouncements.sort(function(a, b) { return new Date(b.TimeStamp) - new Date(a.TimeStamp); });
    return activeAnnouncements;
  } catch (e) { Logger.log("Error in getActiveAnnouncements: " + e.toString()); return []; }
}

function sheetToJSON(sheet) {
  if (!sheet) return [];
  try {
    var data = sheet.getDataRange().getValues();
    if (data.length <= 1) return [];
    var headers = data.shift();
    return data.map(function(row) { return objectifyRow(row, headers); });
  } catch(e) { Logger.log("Error in sheetToJSON for sheet: " + (sheet ? sheet.getName() : 'N/A') + " - " + e.toString());
  return []; }
}

function objectifyRow(row, headers) {
  var obj = {};
  headers.forEach(function(header, i) { if (header) { obj[header] = row[i]; } });
  return obj;
}

function getOrCreateSheet(spreadsheet, sheetName, headers) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
    sheet.appendRow(headers);
  }
  return sheet;
}

function createJsonResponse(data) {
  return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(ContentService.MimeType.JSON);
}

function createErrorResponse(message) {
  return ContentService.createTextOutput(JSON.stringify({ error: message })).setMimeType(ContentService.MimeType.JSON);
}
