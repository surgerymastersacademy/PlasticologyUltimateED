document.addEventListener('DOMContentLoaded', () => {
    // --- URL FOR GOOGLE SHEETS ---
    [cite_start]const API_URL = 'https://script.google.com/macros/s/AKfycbxS4JqdtlcCud_OO3zlWVeCQAUwg2Al1xG3QqITq24vEI5UolL5YL_W1kfnC5soOaiFcQ/exec'; [cite: 384]
    // --- START: NEW SIMULATION SETTINGS ---
    [cite_start]const SIMULATION_Q_COUNT = 100; [cite: 385]
    [cite_start]const SIMULATION_TOTAL_TIME_MINUTES = 120; [cite: 386, 387]
    // --- END: NEW SIMULATION SETTINGS ---
    
    // --- REFACTORED: Centralized Application State ---
    const appState = {
        // Content Data
        allQuestions: [],
        allOsceCases: [],
        [cite_start]allOsceQuestions: [], [cite: 388]
        [cite_start]groupedLectures: {}, [cite: 388]
        [cite_start]mcqBooks: [], [cite: 388]
        [cite_start]allAnnouncements: [], [cite: 388]
        
        // User Data
        currentUser: null,
        [cite_start]viewedLectures: new Set(), [cite: 389]
        [cite_start]bookmarkedQuestions: new Set(), [cite: 389]
        [cite_start]fullActivityLog: [], [cite: 389]
        [cite_start]userQuizNotes: [], [cite: 389]
        [cite_start]userLectureNotes: [], [cite: 389]

        // Navigation
        navigationHistory: [],

        // Current Quiz State
        currentQuiz: {
            questions: [],
            originalQuestions: [],
            userAnswers: [],
            originalUserAnswers: [],
            [cite_start]currentQuestionIndex: 0, [cite: 390]
            [cite_start]score: 0, [cite: 391]
            timerInterval: null,
            simulationTimerInterval: null, // ADDED
            flaggedIndices: new Set(),
            isReviewMode: false,
            [cite_start]isSimulationMode: false, // ADDED [cite: 391]
            [cite_start]isPracticingMistakes: false, [cite: 392]
            [cite_start]timePerQuestion: 45, // Default time [cite: 392]
        },

        // Current OSCE State
        currentOsce: {
            cases: [],
            [cite_start]caseIndex: 0, [cite: 393]
            [cite_start]questionIndex: 0, [cite: 393]
            timerInterval: null,
            userAnswers: {},
            score: 0,
            [cite_start]totalQuestions: 0, [cite: 394]
        },
        
        // ADDED: Current Learning Mode State
        currentLearning: {
            questions: [],
            currentIndex: 0,
            [cite_start]title: '' [cite: 395]
        },

        // UI State
        activityChartInstance: null,
        currentNote: { type: null, itemId: null, itemTitle: null },
        modalConfirmAction: null,
        [cite_start]qbankSearchResults: [], // To store search results [cite: 395]
    };
    [cite_start]const DEFAULT_TIME_PER_QUESTION = 45; [cite: 396]

    // --- DOM ELEMENTS ---
    [cite_start]const globalHeader = document.getElementById('global-header'); [cite: 396]
    [cite_start]const globalHomeBtn = document.getElementById('global-home-btn'); [cite: 397]
    [cite_start]const logoutBtn = document.getElementById('logout-btn'); [cite: 397]
    [cite_start]const activityLogBtn = document.getElementById('activity-log-btn'); [cite: 397]
    [cite_start]const notesBtn = document.getElementById('notes-btn'); [cite: 397]
    [cite_start]const announcementsBtn = document.getElementById('announcements-btn'); [cite: 397]
    [cite_start]const userNameDisplay = document.getElementById('user-name-display'); [cite: 398]
    [cite_start]const loginContainer = document.getElementById('login-container'); [cite: 398]
    [cite_start]const mainMenuContainer = document.getElementById('main-menu-container'); [cite: 398]
    [cite_start]const lecturesContainer = document.getElementById('lectures-container'); [cite: 398]
    [cite_start]const qbankContainer = document.getElementById('qbank-container'); [cite: 398]
    [cite_start]const listContainer = document.getElementById('list-container'); [cite: 399]
    [cite_start]const quizContainer = document.getElementById('quiz-container'); [cite: 399]
    [cite_start]const activityLogContainer = document.getElementById('activity-log-container'); [cite: 399]
    [cite_start]const notesContainer = document.getElementById('notes-container'); [cite: 399]
    [cite_start]const libraryContainer = document.getElementById('library-container'); [cite: 399]
    [cite_start]const leaderboardContainer = document.getElementById('leaderboard-container'); [cite: 400]
    [cite_start]const loginForm = document.getElementById('login-form'); [cite: 400]
    [cite_start]const loginLoader = document.getElementById('login-loader'); [cite: 400]
    [cite_start]const loginLoadingText = document.getElementById('login-loading-text'); [cite: 400]
    [cite_start]const loginError = document.getElementById('login-error'); [cite: 400]
    [cite_start]const usernameInput = document.getElementById('username'); [cite: 401]
    [cite_start]const passwordInput = document.getElementById('password'); [cite: 401]
    [cite_start]const loginSubmitBtn = document.getElementById('login-submit-btn'); [cite: 401]
    [cite_start]const freeTestBtn = document.getElementById('free-test-btn'); [cite: 401]
    [cite_start]const lecturesBtn = document.getElementById('lectures-btn'); [cite: 401]
    [cite_start]const qbankBtn = document.getElementById('qbank-btn'); [cite: 402]
    [cite_start]const libraryBtn = document.getElementById('library-btn'); [cite: 402]
    [cite_start]const leaderboardBtn = document.getElementById('leaderboard-btn'); [cite: 402]
    [cite_start]const lastLectureRibbon = document.getElementById('last-lecture-ribbon'); [cite: 402]
    [cite_start]const lastQuizRibbon = document.getElementById('last-quiz-ribbon'); [cite: 402]
    [cite_start]const libraryBackBtn = document.getElementById('library-back-btn'); [cite: 403]
    [cite_start]const libraryLoader = document.getElementById('library-loader'); [cite: 403]
    [cite_start]const libraryList = document.getElementById('library-list'); [cite: 403]
    [cite_start]const leaderboardBackBtn = document.getElementById('leaderboard-back-btn'); [cite: 403]
    [cite_start]const leaderboardLoader = document.getElementById('leaderboard-loader'); [cite: 403]
    [cite_start]const leaderboardList = document.getElementById('leaderboard-list'); [cite: 404]
    [cite_start]const currentUserRankDiv = document.getElementById('current-user-rank'); [cite: 404]
    [cite_start]const lecturesBackBtn = document.getElementById('lectures-back-btn'); [cite: 404]
    [cite_start]const lectureSearchInput = document.getElementById('lecture-search-input'); [cite: 404]
    [cite_start]const lecturesLoader = document.getElementById('lectures-loader'); [cite: 404]
    [cite_start]const lecturesList = document.getElementById('lectures-list'); [cite: 405]
    [cite_start]const notesBackBtn = document.getElementById('notes-back-btn'); [cite: 405]
    [cite_start]const notesFilterQuizzes = document.getElementById('notes-filter-quizzes'); [cite: 405]
    [cite_start]const notesFilterLectures = document.getElementById('notes-filter-lectures'); [cite: 405]
    [cite_start]const notesList = document.getElementById('notes-list'); [cite: 405]
    [cite_start]const activityBackBtn = document.getElementById('activity-back-btn'); [cite: 406]
    [cite_start]const clearLogBtn = document.getElementById('clear-log-btn'); [cite: 406]
    [cite_start]const allSummary = document.getElementById('all-summary'); [cite: 406]
    [cite_start]const quizSummary = document.getElementById('quiz-summary'); [cite: 406]
    [cite_start]const lectureSummary = document.getElementById('lecture-summary'); [cite: 406]
    [cite_start]const allLecturesProgress = document.getElementById('all-lectures-progress'); [cite: 407]
    [cite_start]const allQuestionsProgress = document.getElementById('all-questions-progress'); [cite: 407]
    [cite_start]const totalCorrectAnswers = document.getElementById('total-correct-answers'); [cite: 407]
    [cite_start]const totalIncorrectAnswers = document.getElementById('total-incorrect-answers'); [cite: 407]
    [cite_start]const overallAccuracy = document.getElementById('overall-accuracy'); [cite: 407]
    [cite_start]const lecturesViewedCount = document.getElementById('lectures-viewed-count'); [cite: 408]
    [cite_start]const chaptersStartedCount = document.getElementById('chapters-started-count'); [cite: 408]
    [cite_start]const activityLogList = document.getElementById('activity-log-list'); [cite: 408]
    [cite_start]const logFilterAll = document.getElementById('log-filter-all'); [cite: 408]
    [cite_start]const logFilterQuizzes = document.getElementById('log-filter-quizzes'); [cite: 408]
    [cite_start]const logFilterLectures = document.getElementById('log-filter-lectures'); [cite: 409]
    [cite_start]const activityChartCanvas = document.getElementById('activity-chart'); [cite: 409]
    [cite_start]const qbankBackBtn = document.getElementById('qbank-back-btn'); [cite: 409]
    [cite_start]const loader = document.getElementById('loader'); [cite: 409]
    [cite_start]const loadingText = document.getElementById('loading-text'); [cite: 409]
    [cite_start]const mockQCountInput = document.getElementById('mock-q-count'); [cite: 410]
    [cite_start]const customTimerInput = document.getElementById('custom-timer-input'); [cite: 410]
    [cite_start]const toggleCustomOptionsBtn = document.getElementById('toggle-custom-options-btn'); [cite: 410]
    [cite_start]const customExamOptions = document.getElementById('custom-exam-options'); [cite: 410]
    [cite_start]const chapterSelectMock = document.getElementById('chapter-select-mock'); [cite: 410]
    [cite_start]const sourceSelectMock = document.getElementById('source-select-mock'); [cite: 411]
    [cite_start]const startMockBtn = document.getElementById('start-mock-btn'); [cite: 411]
    [cite_start]const mockError = document.getElementById('mock-error'); [cite: 411]
    [cite_start]const browseByChapterBtn = document.getElementById('browse-by-chapter-btn'); [cite: 411]
    [cite_start]const browseBySourceBtn = document.getElementById('browse-by-source-btn'); [cite: 411]
    [cite_start]const practiceMistakesBtn = document.getElementById('practice-mistakes-btn'); [cite: 412]
    [cite_start]const listBackBtn = document.getElementById('list-back-btn'); [cite: 412]
    [cite_start]const listTitle = document.getElementById('list-title'); [cite: 412]
    [cite_start]const listItems = document.getElementById('list-items'); [cite: 412]
    [cite_start]const quizTitle = document.getElementById('quiz-title'); [cite: 412]
    [cite_start]const timerDisplay = document.getElementById('timer'); [cite: 413]
    [cite_start]const progressText = document.getElementById('progress-text'); [cite: 413]
    [cite_start]const sourceText = document.getElementById('source-text'); [cite: 413]
    [cite_start]const questionText = document.getElementById('question-text'); [cite: 413]
    [cite_start]const questionImageContainer = document.getElementById('question-image-container'); [cite: 413]
    [cite_start]const answerButtons = document.getElementById('answer-buttons-quiz'); [cite: 414]
    [cite_start]const questionContainer = document.getElementById('question-container'); [cite: 414]
    [cite_start]const controlsContainer = document.getElementById('controls-container'); [cite: 414]
    [cite_start]const hintBtn = document.getElementById('hint-btn'); [cite: 414]
    [cite_start]const hintText = document.getElementById('hint-text'); [cite: 414]
    [cite_start]const previousBtn = document.getElementById('previous-btn'); [cite: 415]
    [cite_start]const nextSkipBtn = document.getElementById('next-skip-btn'); [cite: 415]
    [cite_start]const flagBtn = document.getElementById('flag-btn'); [cite: 415]
    [cite_start]const quizNoteBtn = document.getElementById('quiz-note-btn'); [cite: 415]
    [cite_start]const endQuizBtn = document.getElementById('end-quiz-btn'); [cite: 415]
    [cite_start]const scoreProgressText = document.getElementById('score-progress-text'); [cite: 416]
    [cite_start]const scoreBarCorrect = document.getElementById('score-bar-correct'); [cite: 416]
    [cite_start]const scoreBarIncorrect = document.getElementById('score-bar-incorrect'); [cite: 416]
    [cite_start]const resultsContainer = document.getElementById('results-container'); [cite: 416]
    [cite_start]const resultsTitle = document.getElementById('results-title'); [cite: 416]
    [cite_start]const resultsScoreText = document.getElementById('results-score-text'); [cite: 417]
    [cite_start]const scoreText = document.getElementById('score-text'); [cite: 417]
    [cite_start]const totalQuestionsSpan = document.getElementById('total-questions'); [cite: 417]
    [cite_start]const restartBtn = document.getElementById('restart-btn'); [cite: 417]
    [cite_start]const resultsHomeBtn = document.getElementById('results-home-btn'); [cite: 417]
    [cite_start]const reviewIncorrectBtn = document.getElementById('review-incorrect-btn'); [cite: 418]
    [cite_start]const modalBackdrop = document.getElementById('modal-backdrop'); [cite: 418]
    [cite_start]const confirmationModal = document.getElementById('confirmation-modal'); [cite: 418]
    [cite_start]const modalConfirmBtn = document.getElementById('modal-confirm-btn'); [cite: 418]
    [cite_start]const modalCancelBtn = document.getElementById('modal-cancel-btn'); [cite: 418]
    [cite_start]const questionNavigatorModal = document.getElementById('question-navigator-modal'); [cite: 419]
    [cite_start]const navigatorBtn = document.getElementById('navigator-btn'); [cite: 419]
    [cite_start]const navigatorGrid = document.getElementById('navigator-grid'); [cite: 419]
    [cite_start]const navigatorCloseBtn = document.getElementById('navigator-close-btn'); [cite: 419]
    [cite_start]const imageViewerModal = document.getElementById('image-viewer-modal'); [cite: 419]
    [cite_start]const modalImage = document.getElementById('modal-image'); [cite: 420]
    [cite_start]const imageViewerCloseBtn = document.getElementById('image-viewer-close-btn'); [cite: 420]
    [cite_start]const noteModal = document.getElementById('note-modal'); [cite: 420]
    [cite_start]const noteModalTitle = document.getElementById('note-modal-title'); [cite: 420]
    [cite_start]const noteTextarea = document.getElementById('note-textarea'); [cite: 420]
    [cite_start]const noteSaveBtn = document.getElementById('note-save-btn'); [cite: 421]
    [cite_start]const noteCancelBtn = document.getElementById('note-cancel-btn'); [cite: 421]
    [cite_start]const clearLogModal = document.getElementById('clear-log-modal'); [cite: 421]
    [cite_start]const clearQuizLogsBtn = document.getElementById('clear-quiz-logs-btn'); [cite: 421]
    [cite_start]const clearLectureLogsBtn = document.getElementById('clear-lecture-logs-btn'); [cite: 421]
    [cite_start]const clearAllLogsBtn = document.getElementById('clear-all-logs-btn'); [cite: 422]
    [cite_start]const clearLogCancelBtn = document.getElementById('clear-log-cancel-btn'); [cite: 422]
    [cite_start]const announcementsModal = document.getElementById('announcements-modal'); [cite: 422]
    [cite_start]const announcementsList = document.getElementById('announcements-list'); [cite: 422]
    [cite_start]const announcementsCloseBtn = document.getElementById('announcements-close-btn'); [cite: 422]
    [cite_start]const osceBtn = document.getElementById('osce-btn'); [cite: 423]
    [cite_start]const osceContainer = document.getElementById('osce-container'); [cite: 423]
    [cite_start]const osceQuizContainer = document.getElementById('osce-quiz-container'); [cite: 423]
    [cite_start]const osceBackBtn = document.getElementById('osce-back-btn'); [cite: 423]
    [cite_start]const startOsceSlayerBtn = document.getElementById('start-osce-slayer-btn'); [cite: 423]
    [cite_start]const osceCaseCountInput = document.getElementById('osce-case-count'); [cite: 424]
    [cite_start]const osceTimePerQInput = document.getElementById('osce-time-per-q'); [cite: 424]
    [cite_start]const toggleOsceOptionsBtn = document.getElementById('toggle-osce-options-btn'); [cite: 424]
    [cite_start]const customOsceOptions = document.getElementById('custom-osce-options'); [cite: 424]
    [cite_start]const chapterSelectOsce = document.getElementById('chapter-select-osce'); [cite: 424]
    [cite_start]const sourceSelectOsce = document.getElementById('source-select-osce'); [cite: 425]
    [cite_start]const startCustomOsceBtn = document.getElementById('start-custom-osce-btn'); [cite: 425]
    [cite_start]const osceError = document.getElementById('osce-error'); [cite: 425]
    [cite_start]const endOsceQuizBtn = document.getElementById('end-osce-quiz-btn'); [cite: 425]
    [cite_start]const osceQuizTitle = document.getElementById('osce-quiz-title'); [cite: 425]
    [cite_start]const osceTimer = document.getElementById('osce-timer'); [cite: 426]
    [cite_start]const osceCaseTitle = document.getElementById('osce-case-title'); [cite: 426]
    [cite_start]const osceCaseImageContainer = document.getElementById('osce-case-image-container'); [cite: 426]
    [cite_start]const osceCaseDescription = document.getElementById('osce-case-description'); [cite: 426]
    [cite_start]const osceProgressText = document.getElementById('osce-progress-text'); [cite: 426]
    [cite_start]const osceQuestionImageContainer = document.getElementById('osce-question-image-container'); [cite: 427]
    [cite_start]const osceQuestionText = document.getElementById('osce-question-text'); [cite: 427]
    [cite_start]const osceAnswerArea = document.getElementById('osce-answer-area'); [cite: 427]
    [cite_start]const osceModelAnswerArea = document.getElementById('osce-model-answer-area'); [cite: 427]
    [cite_start]const oscePreviousBtn = document.getElementById('osce-previous-btn'); [cite: 427]
    [cite_start]const osceNextBtn = document.getElementById('osce-next-btn'); [cite: 428]
    [cite_start]const radioBtn = document.getElementById('radio-btn'); [cite: 428]
    [cite_start]const radioCloseBtn = document.getElementById('radio-close-btn'); [cite: 428]
    [cite_start]const osceScoreDisplay = document.getElementById('osce-score'); [cite: 428]
    [cite_start]const osceNavigatorBtn = document.getElementById('osce-navigator-btn'); [cite: 428]
    [cite_start]const osceNavigatorModal = document.getElementById('osce-navigator-modal'); [cite: 429]
    [cite_start]const osceNavigatorContent = document.getElementById('osce-navigator-content'); [cite: 429]
    [cite_start]const osceNavigatorCloseBtn = document.getElementById('osce-navigator-close-btn'); [cite: 429]
    [cite_start]const osceSelfCorrectionArea = document.getElementById('osce-self-correction-area'); [cite: 429]
    [cite_start]const radioBannerContainer = document.getElementById('radio-banner-container'); [cite: 429]
    [cite_start]const learningModeBtn = document.getElementById('learning-mode-btn'); [cite: 430]
    [cite_start]const learningModeContainer = document.getElementById('learning-mode-container'); [cite: 430]
    [cite_start]const learningModeControls = document.getElementById('learning-mode-controls'); [cite: 430]
    [cite_start]const learningModeViewer = document.getElementById('learning-mode-viewer'); [cite: 430]
    [cite_start]const learningModeBackBtn = document.getElementById('learning-mode-back-btn'); [cite: 430]
    [cite_start]const learningBrowseByChapterBtn = document.getElementById('learning-browse-by-chapter-btn'); [cite: 431]
    [cite_start]const learningBrowseBySourceBtn = document.getElementById('learning-browse-by-source-btn'); [cite: 431]
    [cite_start]const endLearningBtn = document.getElementById('end-learning-btn'); [cite: 431]
    [cite_start]const learningTitle = document.getElementById('learning-title'); [cite: 431]
    [cite_start]const learningProgressText = document.getElementById('learning-progress-text'); [cite: 431]
    [cite_start]const learningSourceText = document.getElementById('learning-source-text'); [cite: 432]
    [cite_start]const learningImageContainer = document.getElementById('learning-image-container'); [cite: 432]
    [cite_start]const learningQuestionText = document.getElementById('learning-question-text'); [cite: 432]
    [cite_start]const learningAnswerButtons = document.getElementById('learning-answer-buttons'); [cite: 432]
    [cite_start]const learningPreviousBtn = document.getElementById('learning-previous-btn'); [cite: 432]
    [cite_start]const learningNextBtn = document.getElementById('learning-next-btn'); [cite: 433]
    [cite_start]const learningSearchInput = document.getElementById('learning-search-input'); [cite: 433]
    [cite_start]const learningSearchBtn = document.getElementById('learning-search-btn'); [cite: 433]
    [cite_start]const learningSearchError = document.getElementById('learning-search-error'); [cite: 433]
    [cite_start]const qbankSearchInput = document.getElementById('qbank-search-input'); [cite: 433]
    [cite_start]const qbankSearchQCount = document.getElementById('qbank-search-q-count'); [cite: 434]
    [cite_start]const qbankSearchBtn = document.getElementById('qbank-search-btn'); [cite: 434]
    [cite_start]const qbankSearchError = document.getElementById('qbank-search-error'); [cite: 434]
    [cite_start]const qbankSearchResultsContainer = document.getElementById('qbank-search-results-container'); [cite: 434]
    [cite_start]const qbankSearchResultsInfo = document.getElementById('qbank-search-results-info'); [cite: 434]
    [cite_start]const qbankStartSearchQuizBtn = document.getElementById('qbank-start-search-quiz-btn'); [cite: 435]
    [cite_start]const selectAllSourcesMock = document.getElementById('select-all-sources-mock'); [cite: 435]
    [cite_start]const selectAllChaptersMock = document.getElementById('select-all-chapters-mock'); [cite: 435]
    [cite_start]const practiceBookmarkedBtn = document.getElementById('practice-bookmarked-btn'); [cite: 435]
    [cite_start]const bookmarkBtn = document.getElementById('bookmark-btn'); [cite: 435]
    // --- START: NEW SIMULATION DOM ELEMENTS ---
    [cite_start]const startSimulationBtn = document.getElementById('start-simulation-btn'); [cite: 436]
    [cite_start]const simulationError = document.getElementById('simulation-error'); [cite: 437]
    // --- END: NEW SIMULATION DOM ELEMENTS ---

    // --- FUNCTIONS ---
    
    function logUserActivity(eventData) {
        [cite_start]if (!API_URL || !appState.currentUser || appState.currentUser.Role === 'Guest') return; [cite: 437]
        [cite_start]const now = new Date(); [cite: 438]
        let newLogEntry = null;
        const payload = { 
            ...eventData,
            userId: appState.currentUser.UniqueID,
            userName: appState.currentUser.Name
        [cite_start]}; [cite: 438]
        [cite_start]if (payload.eventType === 'FinishQuiz') { [cite: 439]
            const details = appState.currentQuiz.originalQuestions.map((q, index) => {
                return {
                    qID: q.UniqueID,
                    ans: appState.currentQuiz.originalUserAnswers[index] ? appState.currentQuiz.originalUserAnswers[index].answer 
 [cite_start]: 'No Answer' [cite: 440]
                };
            });
            [cite_start]payload.details = JSON.stringify(details); [cite: 441]

            newLogEntry = {
                logId: now.toISOString(),
                timestamp: now,
                eventType: 'FinishQuiz',
                title: payload.quizTitle,
                [cite_start]score: payload.score, [cite: 442]
                total: payload.totalQuestions,
                isReviewable: true
            [cite_start]}; [cite: 442]
        [cite_start]} [cite: 443]

        fetch(API_URL, {
            method: 'POST',
            mode: 'no-cors',
            body: JSON.stringify(payload)
        }).then(() => {
            if (newLogEntry) {
                [cite_start]appState.fullActivityLog.unshift(newLogEntry); [cite: 444]
            }
        [cite_start]}).catch(error => console.error('Error logging activity:', error)); [cite: 444]
    [cite_start]} [cite: 445]

    function parseQuestions(data) {
        [cite_start]if (!data) return []; [cite: 445]
        [cite_start]return data.filter(row => row.Question && String(row.Question).trim()).map(row => { [cite: 446]
            const answerOptions = [];
            if (row.CorrectAnswer && String(row.CorrectAnswer).trim() !== '') answerOptions.push({ text: String(row.CorrectAnswer), isCorrect: true, rationale: row.CorrectRationale || '' });
            [cite_start]if (row.IncorrectAnswer1 && String(row.IncorrectAnswer1).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer1), isCorrect: false, rationale: row.IncorrectRationale1 || '' }); [cite: 446]
            [cite_start]if (row.IncorrectAnswer2 && String(row.IncorrectAnswer2).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer2), isCorrect: false, rationale: row.IncorrectRationale2 || '' }); [cite: 447]
            [cite_start]if (row.IncorrectAnswer3 && String(row.IncorrectAnswer3).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer3), isCorrect: false, rationale: row.IncorrectRationale3 || '' }); [cite: 447]
            return { 
                [cite_start]UniqueID: row.UniqueID, [cite: 447]
                [cite_start]chapter: (row.Chapter && String(row.Chapter).trim()) ? [cite: 448]
[cite_start]row.Chapter : 'Uncategorized', [cite: 449]
                [cite_start]question: row.Question, [cite: 449]
                [cite_start]hint: row.Hint || [cite: 449]
[cite_start]'', [cite: 450]
                [cite_start]source: row.Source || [cite: 450]
[cite_start]'', [cite: 451]
                [cite_start]ImageURL: row.ImageURL || [cite: 451]
[cite_start]'', [cite: 452]
                answerOptions: answerOptions 
            [cite_start]}; [cite: 452]
[cite_start]}); [cite: 453]
    }
    
    function groupLecturesByChapter(lectureData) {
        [cite_start]if (!lectureData) return {}; [cite: 453]
        [cite_start]const chapters = {}; [cite: 454]
        lectureData.forEach(row => {
            const chapterName = row.Chapter;
            if (!chapterName || String(chapterName).length < 2) return;
            if (!chapters[chapterName]) {
                chapters[chapterName] = { topics: [], mock: null, icon: '' };
            [cite_start]} [cite: 454]
            [cite_start]if (row.LectureName) { [cite: 455]
                chapters[chapterName].topics.push({ 
                    id: row.UniqueID,
                    name: row.LectureName, 
                    [cite_start]link: row.LectureURL [cite: 456]
                });
            }
            [cite_start]if (row['Mock Link'] && !chapters[chapterName].mock) { [cite: 456]
                chapters[chapterName].mock = { 
                    link: row['Mock Link'], 
                    name: row['Mock Name'] || [cite_start]'Mock Exam' [cite: 457]
                };
            }
            [cite_start]if(row.ChapterIcon && !chapters[chapterName].icon) { [cite: 458]
                [cite_start]chapters[chapterName].icon = row.ChapterIcon; [cite: 458]
[cite_start]} [cite: 459]
        });
        [cite_start]return chapters; [cite: 459]
[cite_start]} [cite: 460]

    function parseOsceCases(data) {
        [cite_start]if (!data) return []; [cite: 460]
        [cite_start]return data.filter(row => row.CaseID && row.Title).map(row => ({ [cite: 461]
            CaseID: row.CaseID,
            Title: row.Title,
            ImageURL: row.ImageURL,
            Hint: row.Hint,
            CaseDescription: row.CaseDescription,
            [cite_start]AudioURL: row.AudioURL, [cite: 462]
            Chapter: row.Chapter,
            Source: row.Source
        [cite_start]})); [cite: 462]
[cite_start]} [cite: 463]

    function parseOsceQuestions(data) {
        [cite_start]if (!data) return []; [cite: 463]
        [cite_start]return data.filter(row => row.QuestionID && row.CaseID).map(row => { [cite: 464]
            const answerOptions = [];
             if (row.CorrectAnswer && String(row.CorrectAnswer).trim() !== '') answerOptions.push({ text: String(row.CorrectAnswer), isCorrect: true, rationale: row.CorrectRationale || '' });
            [cite_start]if (row.IncorrectAnswer1 && String(row.IncorrectAnswer1).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer1), isCorrect: false, rationale: row.IncorrectRationale1 || '' }); [cite: 464]
            [cite_start]if (row.IncorrectAnswer2 && String(row.IncorrectAnswer2).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer2), isCorrect: false, rationale: row.IncorrectRationale2 || '' }); [cite: 465]
            if (row.IncorrectAnswer3 && String(row.IncorrectAnswer3).trim() !== '') answerOptions.push({ text: String(row.IncorrectAnswer3), isCorrect: false, rationale: row.IncorrectRationale3 || '' });

            return {
                QuestionID: row.QuestionID,
                [cite_start]CaseID: row.CaseID, [cite: 466]
                QuestionType: row.QuestionType,
                QuestionText: row.QuestionText,
                EssayModelAnswer: row.EssayModelAnswer,
                ImageURL: row.ImageURL,
                [cite_start]AudioURL: row.AudioURL, [cite: 467]
                answerOptions: answerOptions
            [cite_start]}; [cite: 467]
[cite_start]}); [cite: 468]
    }

    async function loadContentData() {
        [cite_start]loginLoader.classList.remove('hidden'); [cite: 468]
        [cite_start]loginLoadingText.classList.remove('hidden'); [cite: 469]
        try {
            const response = await fetch(`${API_URL}?request=contentData&t=${new Date().getTime()}`, {
                method: 'GET',
                mode: 'cors',
                redirect: 'follow'
            [cite_start]}); [cite: 469]

            [cite_start]if (!response.ok) throw new Error(`Network response was not ok. Status: ${response.status}`); [cite: 470]
            
            [cite_start]const data = await response.json(); [cite: 470]
            [cite_start]if (data.error) throw new Error(data.error); [cite: 471]

            appState.allQuestions = parseQuestions(data.questions);
            appState.groupedLectures = groupLecturesByChapter(data.lectures);
            appState.mcqBooks = data.books || [];
            [cite_start]appState.allAnnouncements = data.announcements || [cite: 471]
[cite_start][]; [cite: 472]
            appState.allOsceCases = parseOsceCases(data.osceCases);
            appState.allOsceQuestions = parseOsceQuestions(data.osceQuestions);
            
            populateAllFilterOptions();
            renderLectures();
            
            loginLoader.classList.add('hidden');
            [cite_start]loginLoadingText.classList.add('hidden'); [cite: 472]
        [cite_start]} catch (error) { [cite: 473]
            [cite_start]console.error("Error loading content data:", error); [cite: 473]
            loginLoadingText.textContent = `Failed to load content. Please ensure the script is deployed correctly and refresh. [cite_start]Error: ${error.message}`; [cite: 474]
        [cite_start]} [cite: 475]
    }

    async function loadUserData() {
        [cite_start]if (!appState.currentUser || appState.currentUser.Role === 'Guest') return; [cite: 475]
        try {
            [cite_start]const response = await fetch(`${API_URL}?request=userData&userId=${appState.currentUser.UniqueID}&t=${new Date().getTime()}`); [cite: 476]
            [cite_start]if (!response.ok) throw new Error('Could not fetch user data.'); [cite: 477]
            
            const data = await response.json();
            [cite_start]if (data.error) throw new Error(data.error); [cite: 477]
            appState.fullActivityLog = data.logs || [cite_start][]; [cite: 478]
            appState.userQuizNotes = data.quizNotes || [cite_start][]; [cite: 478]
            appState.userLectureNotes = data.lectureNotes || [cite_start][]; [cite: 478]
        [cite_start]} catch (error) { [cite: 479]
            [cite_start]console.error('Error loading user data:', error); [cite: 479]
        [cite_start]} [cite: 480]
    }

    function populateFilterOptions(containerElement, items, inputNamePrefix, counts) {
        [cite_start]containerElement.innerHTML = ''; [cite: 480]
        if (!items || items.length === 0) {
            [cite_start]containerElement.innerHTML = `<p class="text-slate-400 text-sm">No options available.</p>`; [cite: 481]
            [cite_start]return; [cite: 482]
        }

        items.forEach(item => {
            const div = document.createElement('div');
            div.className = 'flex items-center';
            const safeId = `${inputNamePrefix}-${item.replace(/[^a-zA-Z0-9]/g, '-')}`;
            const count = counts[item] || 0;
            [cite_start]div.innerHTML = `<input id="${safeId}" name="${inputNamePrefix}" value="${item}" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"><label for="${safeId}" class="ml-3 text-sm text-gray-600">${item} (${count} Qs)</label>`; [cite: 483]
            containerElement.appendChild(div);
        });
    [cite_start]} [cite: 484]

    function populateAllFilterOptions() {
        [cite_start]const sourceCounts = {}; [cite: 484]
        [cite_start]const chapterCounts = {}; [cite: 485]

        appState.allQuestions.forEach(q => {
            const source = q.source || 'Uncategorized';
            const chapter = q.chapter || 'Uncategorized';
            sourceCounts[source] = (sourceCounts[source] || 0) + 1;
            chapterCounts[chapter] = (chapterCounts[chapter] || 0) + 1;
        [cite_start]}); [cite: 485]

        const sortedSources = Object.keys(sourceCounts).sort();
        const sortedChapters = Object.keys(chapterCounts).sort();
        
        [cite_start]populateFilterOptions(sourceSelectMock, sortedSources, 'mock-source', sourceCounts); [cite: 486]
        [cite_start]populateFilterOptions(chapterSelectMock, sortedChapters, 'mock-chapter', chapterCounts); [cite: 487]
        
        [cite_start]const osceChapters = [...new Set(appState.allOsceCases.map(c => c.Chapter).filter(c => c))].sort(); [cite: 487]
        [cite_start]const osceSources = [...new Set(appState.allOsceCases.map(c => c.Source).filter(s => s))].sort(); [cite: 488]
        // We don't have counts for OSCE yet, so we pass an empty object
        [cite_start]populateFilterOptions(chapterSelectOsce, osceChapters, 'osce-chapter', {}); [cite: 488]
        [cite_start]populateFilterOptions(sourceSelectOsce, osceSources, 'osce-source', {}); [cite: 489]
    }
    
    function updateChapterFilter() {
        [cite_start]const selectedSources = [...sourceSelectMock.querySelectorAll('input:checked')].map(el => el.value); [cite: 489]
        let relevantQuestions;
        if (selectedSources.length === 0) {
            [cite_start]relevantQuestions = appState.allQuestions; [cite: 490]
        [cite_start]} else { [cite: 491]
            [cite_start]relevantQuestions = appState.allQuestions.filter(q => selectedSources.includes(q.source || 'Uncategorized')); [cite: 491]
        [cite_start]} [cite: 492]

        [cite_start]const chapterCounts = {}; [cite: 492]
        [cite_start]relevantQuestions.forEach(q => { [cite: 493]
            const chapter = q.chapter || 'Uncategorized';
            chapterCounts[chapter] = (chapterCounts[chapter] || 0) + 1;
        [cite_start]}); [cite: 493]
        [cite_start]const sortedChapters = Object.keys(chapterCounts).sort(); [cite: 494]
        [cite_start]populateFilterOptions(chapterSelectMock, sortedChapters, 'mock-chapter', chapterCounts); [cite: 494]
    }

    async function handleLogin(event) {
        [cite_start]event.preventDefault(); [cite: 494]
        [cite_start]loginError.classList.add('hidden'); [cite: 495]
        loginSubmitBtn.disabled = true;
        [cite_start]loginSubmitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Logging in...'; [cite: 495]
        const payload = {
            eventType: 'login',
            username: usernameInput.value,
            password: passwordInput.value
        [cite_start]}; [cite: 496]
        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                mode: 'cors',
                body: JSON.stringify(payload),
                [cite_start]redirect: 'follow' [cite: 498]
            [cite_start]}); [cite: 498]
            [cite_start]const result = await response.json(); [cite: 499]

            if (result.success) {
                [cite_start]appState.currentUser = result.user; [cite: 499]
                [cite_start]updateWatermark(appState.currentUser); [cite: 500]
                loadUserProgress();
                await loadUserData();
                showMainMenuScreen();
            } else {
                [cite_start]loginError.textContent = result.message || [cite: 500]
[cite_start]"Invalid username or password."; [cite: 501]
                [cite_start]loginError.classList.remove('hidden'); [cite: 501]
            }
        } catch (error) {
            [cite_start]console.error("Login API Error:", error); [cite: 501]
            [cite_start]loginError.textContent = "An error occurred. Please try again."; [cite: 502]
            loginError.classList.remove('hidden');
        } finally {
            [cite_start]loginSubmitBtn.disabled = false; [cite: 502]
            [cite_start]loginSubmitBtn.textContent = 'Log In'; [cite: 503]
        }
    }
    
    function showScreen(screenToShow, isGuest = false) {
        [loginContainer, mainMenuContainer, lecturesContainer, qbankContainer, listContainer, quizContainer, activityLogContainer, notesContainer, libraryContainer, leaderboardContainer, osceContainer, osceQuizContainer, learningModeContainer].forEach(screen => {
            if(screen) screen.classList.add('hidden');
        });
        [cite_start]if(screenToShow) screenToShow.classList.remove('hidden'); [cite: 504]

        const watermarkOverlay = document.getElementById('watermark-overlay');
        if (screenToShow !== loginContainer && !isGuest) {
            [cite_start]globalHeader.classList.remove('hidden'); [cite: 504]
            [cite_start]watermarkOverlay.classList.remove('hidden'); [cite: 505]
            if (isGuest) {
                [cite_start]userNameDisplay.classList.add('hidden'); [cite: 505]
                [cite_start]logoutBtn.classList.add('hidden'); [cite: 506]
                [cite_start]activityLogBtn.classList.add('hidden'); [cite: 506]
                notesBtn.classList.add('hidden');
            } else {
                [cite_start]userNameDisplay.textContent = appState.currentUser.Name; [cite: 506]
                [cite_start]userNameDisplay.classList.remove('hidden'); [cite: 507]
                [cite_start]logoutBtn.classList.remove('hidden'); [cite: 507]
                [cite_start]activityLogBtn.classList.remove('hidden'); [cite: 507]
                notesBtn.classList.remove('hidden');
            }
        } else {
            [cite_start]globalHeader.classList.add('hidden'); [cite: 507]
            [cite_start]watermarkOverlay.classList.add('hidden'); [cite: 508]
        }
    }

    async function showMainMenuScreen() {
        [cite_start]showScreen(mainMenuContainer); [cite: 508]
        [cite_start]appState.navigationHistory = [showMainMenuScreen]; [cite: 509]
        displayAnnouncement();
        await fetchAndShowLastActivity();
    }
    
    function showLecturesScreen() {
        [cite_start]showScreen(lecturesContainer); [cite: 509]
        [cite_start]appState.navigationHistory.push(showLecturesScreen); [cite: 510]
        renderLectures();
    }

    function showQbankScreen() {
        [cite_start]showScreen(qbankContainer); [cite: 510]
        [cite_start]appState.navigationHistory.push(showQbankScreen); [cite: 511]
    }

    function showLibraryScreen() {
        [cite_start]showScreen(libraryContainer); [cite: 511]
        [cite_start]appState.navigationHistory.push(showLibraryScreen); [cite: 512]
        renderBooks();
    }

    async function showLeaderboardScreen() {
        [cite_start]showScreen(leaderboardContainer); [cite: 512]
        [cite_start]appState.navigationHistory.push(showLeaderboardScreen); [cite: 513]
        leaderboardList.innerHTML = '';
        currentUserRankDiv.innerHTML = '';
        leaderboardLoader.classList.remove('hidden');
        try {
            [cite_start]const response = await fetch(`${API_URL}?request=leaderboard&userId=${appState.currentUser.UniqueID}&t=${new Date().getTime()}`); [cite: 513]
            [cite_start]if (!response.ok) throw new Error('Failed to fetch leaderboard data.'); [cite: 514]
            const data = await response.json();
            [cite_start]if (data.error) throw new Error(data.error); [cite: 514]
            [cite_start]renderLeaderboard(data.leaderboard, data.currentUserRank); [cite: 515]
        } catch (error) {
            [cite_start]console.error("Error loading leaderboard:", error); [cite: 515]
            [cite_start]leaderboardList.innerHTML = `<p class="text-center text-red-500">${error.message}</p>`; [cite: 516]
        } finally {
            [cite_start]leaderboardLoader.classList.add('hidden'); [cite: 516]
        [cite_start]} [cite: 517]
    }

    function renderLeaderboard(top10, currentUserRank) {
        [cite_start]leaderboardList.innerHTML = ''; [cite: 517]
        [cite_start]currentUserRankDiv.innerHTML = ''; [cite: 518]

        if (currentUserRank) {
            currentUserRankDiv.innerHTML = `
                <div class="p-4 bg-blue-100 border-2 border-blue-300 rounded-lg">
                    <h4 class="text-lg font-bold text-center text-blue-800">Your Rank</h4>
                    [cite_start]<div class="flex items-center justify-between mt-2"> [cite: 519]
                        <div class="flex items-center">
                            <div class="w-10 h-10 flex items-center justify-center text-xl font-bold text-blue-700">${currentUserRank.rank}</div>
                            [cite_start]<p class="font-bold text-slate-800 text-lg ml-4">${currentUserRank.name} (You)</p> [cite: 520]
                        </div>
                        <div class="text-right">
                            [cite_start]<p class="font-extrabold text-2xl text-blue-600">${currentUserRank.score}</p> [cite: 521]
                            <p class="text-xs text-slate-500">Total Score</p>
                        </div>
                    </div>
                [cite_start]</div> [cite: 522]
            `;
        [cite_start]} [cite: 523]

        if (!top10 || top10.length === 0) {
            leaderboardList.innerHTML = `<p class="text-center text-slate-500 mt-4">The leaderboard is empty.
[cite_start]Start a quiz to get on the board!</p>`; [cite: 524]
            return;
        }

        top10.forEach(user => {
            const rank = user.rank;
            let rankIcon = '';
            let rankColor = 'bg-white border-slate-200';
            [cite_start]if (rank === 1) { [cite: 525]
                rankIcon = 'fas fa-trophy text-yellow-400';
                rankColor = 'bg-yellow-100 border-yellow-300';
            } else if (rank === 2) {
                rankIcon = 'fas fa-medal text-gray-400';
                [cite_start]rankColor = 'bg-gray-100 border-gray-300'; [cite: 526]
            } else if (rank === 3) {
                rankIcon = 'fas fa-award text-orange-400';
                rankColor = 'bg-orange-100 border-orange-300';
            [cite_start]} [cite: 526]

            [cite_start]const userElement = document.createElement('div'); [cite: 527]
            userElement.className = `flex items-center p-4 rounded-lg border-2 ${rankColor}`;
            
            userElement.innerHTML = `
                [cite_start]<div class="w-10 h-10 flex items-center justify-center text-xl font-bold ${rank > 3 ? [cite: 528]
[cite_start]'text-slate-600' : ''}"> [cite: 529]
                    ${rankIcon ? `<i class="${rankIcon}"></i>` : rank}
                </div>
                <div class="flex-grow ml-4">
                    [cite_start]<p class="font-bold text-slate-800 text-lg">${user.name}</p> [cite: 530]
                </div>
                <div class="text-right">
                    <p class="font-bold text-slate-500">Rank ${rank}</p>
                </div>
        [cite_start]`; [cite: 531]
            leaderboardList.appendChild(userElement);
        });
    }


    function renderBooks() {
        libraryList.innerHTML = '';
        if (appState.mcqBooks.length === 0) {
            [cite_start]libraryList.innerHTML = `<p class="text-center text-slate-500">No books found in the library.</p>`; [cite: 532]
            return;
        }

        appState.mcqBooks.forEach(book => {
            if (!book.Book || !book.Link) return;
            [cite_start]const bookElement = document.createElement('a'); [cite: 532]
            [cite_start]bookElement.href = book.Link; [cite: 533]
            bookElement.target = '_blank';
            [cite_start]bookElement.className = 'flex items-start p-4 bg-white rounded-lg border border-slate-200 shadow-sm hover:shadow-md hover:bg-slate-50 transition-all duration-200'; [cite: 533]
            // --- START: MODIFIED CODE ---
            let iconHtml;
            [cite_start]// Check if the icon field contains a valid URL [cite: 534]
            [cite_start]if (book.icon && (book.icon.startsWith('http://') || book.icon.startsWith('https://'))) { [cite: 535]
                // If it's a URL, use an <img> tag
                iconHtml = `<div class="flex-shrink-0 w-12 h-12 flex items-center justify-center bg-slate-100 rounded-lg mr-4 overflow-hidden">
                                [cite_start]<img src="${book.icon}" alt="${book.Book}" class="w-full h-full object-cover"> [cite: 536]
                            </div>`;
            [cite_start]} else { [cite: 537]
                // Otherwise, use a Font Awesome icon (either from the sheet or a default one)
                iconHtml = `<div class="flex-shrink-0 w-12 h-12 flex items-center justify-center bg-orange-100 rounded-lg mr-4">
                                    [cite_start]<i class="${book.icon || 'fas fa-book'} text-2xl text-orange-600"></i> [cite: 538]
                            </div>`;
            [cite_start]} [cite: 539]
            // --- END: MODIFIED CODE ---

            const contentHtml = `<div class="flex-grow">
                                     <h3 class="font-bold text-slate-800 text-lg">${book.Book}</h3>
                                        [cite_start]<p class="text-slate-600 text-sm mt-1">${book.Description || [cite: 540]
[cite_start]''}</p> [cite: 541]
                                 </div>`;
            const arrowHtml = `<div class="flex-shrink-0 ml-4 self-center">
                                   <i class="fas fa-external-link-alt text-slate-400"></i>
                               [cite_start]</div>`; [cite: 542]
            [cite_start]bookElement.innerHTML = iconHtml + contentHtml + arrowHtml; [cite: 543]
            libraryList.appendChild(bookElement);
        });
    }
    
    function renderLectures(filterText = '') {
        [cite_start]lecturesList.innerHTML = ''; [cite: 543]
        [cite_start]const lowerCaseFilter = filterText.toLowerCase(); [cite: 544]
        const chapterNames = Object.keys(appState.groupedLectures).sort();
        let chaptersFound = 0;
        [cite_start]if (Object.keys(appState.groupedLectures).length === 0) { [cite: 545]
            [cite_start]lecturesLoader.classList.remove('hidden'); [cite: 545]
            [cite_start]return; [cite: 546]
        }
        [cite_start]lecturesLoader.classList.add('hidden'); [cite: 546]
        [cite_start]chapterNames.forEach(chapterName => { [cite: 547]
            const chapterData = appState.groupedLectures[chapterName];
            const isChapterMatch = chapterName.toLowerCase().includes(lowerCaseFilter);
            const isTopicMatch = chapterData.topics.some(topic => topic.name.toLowerCase().includes(lowerCaseFilter));
            if (filterText && !isChapterMatch && !isTopicMatch) return;
            chaptersFound++;
 
            [cite_start]const details = document.createElement('details'); [cite: 548]
            details.className = 'bg-white rounded-lg border border-slate-200 overflow-hidden shadow-sm';
            details.open = !!filterText;
            const summary = document.createElement('summary');
            [cite_start]summary.className = 'p-4 cursor-pointer hover:bg-slate-50'; [cite: 548]
            
            [cite_start]const totalTopics = chapterData.topics.length; [cite: 549]
            [cite_start]const viewedTopics = chapterData.topics.filter(topic => appState.viewedLectures.has(topic.link)).length; [cite: 549]
            const progressPercentage = totalTopics > 0 ? (viewedTopics / totalTopics) [cite_start]* 100 : 0; [cite: 550]
            summary.innerHTML = `
                <div class="flex justify-between items-center">
                    <span class="flex items-center font-bold text-slate-800 text-lg">
                        <i class="${chapterData.icon || 'fas fa-layer-group'} mr-3 text-cyan-600 w-5 text-center"></i>
                        [cite_start]${chapterName} [cite: 552]
                    </span>
                    <div class="flex items-center gap-4">
                        [cite_start]<i class="fas fa-chevron-down transition-transform duration-300 text-slate-500"></i> [cite: 553]
                    </div>
                </div>
                <div class="mt-2 flex items-center gap-2">
                    <div class="w-full bg-slate-200 rounded-full h-2.5">
                        [cite_start]<div class="bg-cyan-600 h-2.5 rounded-full" style="width: ${progressPercentage}%"></div> [cite: 554]
                    </div>
                    <span class="text-xs font-semibold text-slate-500">${viewedTopics}/${totalTopics}</span>
                [cite_start]</div> [cite: 555]
            `;
            [cite_start]const contentDiv = document.createElement('div'); [cite: 556]
            contentDiv.className = 'p-4 bg-slate-50 border-t border-slate-200';
            const topicList = document.createElement('ul');
            topicList.className = 'space-y-2';
            [cite_start]chapterData.topics.forEach(topic => { [cite: 557]
                const listItem = document.createElement('li');
                listItem.className = 'flex items-center justify-between p-3 rounded-md hover:bg-blue-100 transition-colors group';
                const isViewed = appState.viewedLectures.has(topic.link);
                
                [cite_start]if (isViewed) { [cite: 558]
                    listItem.classList.add('lecture-viewed');
                }

                [cite_start]const controls = document.createElement('div'); [cite: 558]
                [cite_start]controls.className = 'flex items-center gap-3'; [cite: 559]

                const icon = document.createElement('i');
                icon.className = `fas ${isViewed ? 'fa-check-circle' : 'fa-play-circle'} mr-3 text-blue-500 view-toggle-icon`;
                icon.addEventListener('click', (e) => {
                    [cite_start]e.preventDefault(); [cite: 560]
                    e.stopPropagation();
                    [cite_start]toggleLectureViewed(topic.link, topic.name); [cite: 560]
[cite_start]}); [cite: 561]

                const noteIcon = document.createElement('i');
                [cite_start]const hasNote = appState.userLectureNotes.some(note => note.LectureID === topic.id); [cite: 561]
                noteIcon.className = `fas fa-sticky-note text-slate-400 hover:text-amber-500 note-icon ${hasNote ? [cite_start]'has-note' : ''}`; [cite: 562]
                [cite_start]noteIcon.addEventListener('click', (e) => { [cite: 563]
                     e.preventDefault();
                     e.stopPropagation();
                     openNoteModal('lecture', topic.id, topic.name);
                [cite_start]}); [cite: 564]
                
                controls.appendChild(icon);
                controls.appendChild(noteIcon);
                
                const content = document.createElement('div');
                content.className = "flex-grow";
                [cite_start]if (topic.link) { [cite: 565]
                    [cite_start]const link = document.createElement('a'); [cite: 565]
                    [cite_start]link.href = topic.link; [cite: 566]
                    link.target = '_blank';
                    link.className = "lecture-name text-slate-800 font-medium";
                    link.textContent = topic.name;
                    content.appendChild(link);
                [cite_start]} else { [cite: 566]
                    [cite_start]const nameSpan = document.createElement('span'); [cite: 567]
                    [cite_start]nameSpan.className = "lecture-name text-slate-500"; [cite: 568]
                    nameSpan.textContent = topic.name;
                    content.appendChild(nameSpan);
                }
                
                [cite_start]listItem.appendChild(controls); [cite: 568]
                [cite_start]listItem.appendChild(content); [cite: 569]
                
                topicList.appendChild(listItem);
            });
            contentDiv.appendChild(topicList);
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'mt-4 pt-4 border-t border-slate-200 flex flex-col sm:flex-row gap-3';
            [cite_start]const relevantQuestions = appState.allQuestions.filter(q => q.chapter.trim().toLowerCase() === chapterName.trim().toLowerCase()); [cite: 570]
            if (relevantQuestions.length > 0) {
                [cite_start]const quizButton = document.createElement('button'); [cite: 570]
                [cite_start]quizButton.className = 'w-full action-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center gap-2'; [cite: 571]
                [cite_start]quizButton.innerHTML = `<i class="fas fa-pencil-alt"></i> Test Chapter (${relevantQuestions.length} Qs)`; [cite: 572]
                quizButton.addEventListener('click', () => startChapterQuiz(chapterName, relevantQuestions));
                actionsDiv.appendChild(quizButton);
            [cite_start]} [cite: 572]
            [cite_start]if (chapterData.mock && chapterData.mock.link) { [cite: 573]
                [cite_start]const mockButton = document.createElement('a'); [cite: 573]
                [cite_start]mockButton.href = chapterData.mock.link; [cite: 574]
                mockButton.target = '_blank';
                [cite_start]mockButton.className = 'w-full action-btn bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center gap-2'; [cite: 574]
                [cite_start]mockButton.innerHTML = `<i class="fas fa-vial"></i> ${chapterData.mock.name}`; [cite: 575]
                actionsDiv.appendChild(mockButton);
            }
            if(actionsDiv.hasChildNodes()){
                contentDiv.appendChild(actionsDiv);
            [cite_start]} [cite: 575]
            [cite_start]details.appendChild(summary); [cite: 576]
            details.appendChild(contentDiv);
            lecturesList.appendChild(details);
        });
        [cite_start]if (chaptersFound === 0) { [cite: 577]
             [cite_start]lecturesList.innerHTML = `<p class="text-center text-slate-500">No lectures found matching your search.</p>`; [cite: 577]
        [cite_start]} [cite: 578]
    }

    function toggleLectureViewed(lectureLink, lectureName) {
        if (appState.viewedLectures.has(lectureLink)) {
            [cite_start]appState.viewedLectures.delete(lectureLink); [cite: 578]
        [cite_start]} else { [cite: 579]
            [cite_start]appState.viewedLectures.add(lectureLink); [cite: 579]
            logUserActivity({
                eventType: 'ViewLecture',
                lectureName: lectureName 
            [cite_start]}); [cite: 580]
        [cite_start]} [cite: 581]
        saveUserProgress();
        [cite_start]renderLectures(lectureSearchInput.value); [cite: 581]
    [cite_start]} [cite: 582]

    function saveUserProgress() {
        [cite_start]if (!appState.currentUser || appState.currentUser.Role === 'Guest') return; [cite: 582]
        [cite_start]localStorage.setItem(`viewedLectures_${appState.currentUser.UniqueID}`, JSON.stringify(Array.from(appState.viewedLectures))); [cite: 583]
        [cite_start]localStorage.setItem(`bookmarkedQuestions_${appState.currentUser.UniqueID}`, JSON.stringify(Array.from(appState.bookmarkedQuestions))); [cite: 583]
    }

    function loadUserProgress() {
        [cite_start]if (!appState.currentUser || appState.currentUser.Role === 'Guest') return; [cite: 583]
        [cite_start]const savedLectures = localStorage.getItem(`viewedLectures_${appState.currentUser.UniqueID}`); [cite: 584]
        if (savedLectures) {
            [cite_start]appState.viewedLectures = new Set(JSON.parse(savedLectures)); [cite: 584]
        [cite_start]} [cite: 585]
        [cite_start]const savedBookmarks = localStorage.getItem(`bookmarkedQuestions_${appState.currentUser.UniqueID}`); [cite: 585]
        [cite_start]if (savedBookmarks) { [cite: 586]
            [cite_start]appState.bookmarkedQuestions = new Set(JSON.parse(savedBookmarks)); [cite: 586]
        [cite_start]} [cite: 587]
    }

    async function fetchAndShowLastActivity() {
        [cite_start]if (!appState.currentUser || appState.currentUser.Role === 'Guest') return; [cite: 587]
        [cite_start]lastLectureRibbon.classList.add('hidden'); [cite: 588]
        lastQuizRibbon.classList.add('hidden');
        
        if (appState.fullActivityLog.length === 0) return;

        [cite_start]const lastLecture = appState.fullActivityLog.find(log => log.eventType === 'ViewLecture'); [cite: 588]
        [cite_start]const lastQuiz = appState.fullActivityLog.find(log => log.eventType === 'FinishQuiz'); [cite: 589]

        if (lastLecture) {
            [cite_start]lastLectureRibbon.innerHTML = `<i class="fas fa-video mr-2"></i> Last Lecture Viewed: <strong>${lastLecture.title}</strong>`; [cite: 589]
            [cite_start]lastLectureRibbon.classList.remove('hidden'); [cite: 590]
        }
        if (lastQuiz) {
            [cite_start]lastQuizRibbon.innerHTML = `<i class="fas fa-check-double mr-2"></i> Last Quiz: <strong>${lastQuiz.title}</strong> (Score: ${lastQuiz.score}/${lastQuiz.total})`; [cite: 590]
            [cite_start]lastQuizRibbon.classList.remove('hidden'); [cite: 591]
        }
    }

    async function showActivityLog() {
        [cite_start]showScreen(activityLogContainer); [cite: 591]
        [cite_start]appState.navigationHistory.push(showActivityLog); [cite: 592]
        activityLogList.innerHTML = '<div class="loader"></div>';
        await loadUserData();
        renderFilteredLog('all');
    }

    function renderFilteredLog(filter) {
        [cite_start]activityLogList.innerHTML = ''; [cite: 592]
        [cite_start]document.querySelectorAll('#activity-log-container .filter-btn').forEach(btn => btn.classList.remove('active')); [cite: 593]
        document.getElementById(`log-filter-${filter}`).classList.add('active');

        allSummary.classList.add('hidden');
        quizSummary.classList.add('hidden');
        lectureSummary.classList.add('hidden');

        const logsToDisplay = appState.fullActivityLog.filter(log => {
            if (filter === 'all') return true;
            if (filter === 'quizzes') return log.eventType === 'FinishQuiz';
            if (filter === 'lectures') return log.eventType === 'ViewLecture';
            return false;
        [cite_start]}); [cite: 594]
        
        renderActivityChart(logsToDisplay);

        [cite_start]const quizLogs = appState.fullActivityLog.filter(log => log.eventType === 'FinishQuiz'); [cite: 594]
        [cite_start]let totalCorrect = 0; [cite: 595]
        let totalAttemptedInQuizzes = 0;

        quizLogs.forEach(log => {
            const score = parseInt(log.score, 10) || 0;
            const total = parseInt(log.total, 10) || 0;
            totalCorrect += score;
            totalAttemptedInQuizzes += total;
        [cite_start]}); [cite: 595]
        [cite_start]const totalIncorrect = totalAttemptedInQuizzes - totalCorrect; [cite: 596]

        if (filter === 'all') {
            [cite_start]allSummary.classList.remove('hidden'); [cite: 596]
            [cite_start]const totalLecturesInSystem = Object.values(appState.groupedLectures).reduce((acc, chapter) => acc + chapter.topics.length, 0); [cite: 597]
            [cite_start]const viewedLectureCount = new Set(appState.fullActivityLog.filter(l => l.eventType === 'ViewLecture').map(l => l.title)).size; [cite: 598]
            [cite_start]allLecturesProgress.textContent = `${viewedLectureCount} / ${totalLecturesInSystem}`; [cite: 598]
            [cite_start]allQuestionsProgress.textContent = `${totalAttemptedInQuizzes} / ${appState.allQuestions.length}`; [cite: 599]

        } else if (filter === 'quizzes') {
            [cite_start]quizSummary.classList.remove('hidden'); [cite: 599]
            [cite_start]totalCorrectAnswers.textContent = totalCorrect; [cite: 600]
            totalIncorrectAnswers.textContent = totalIncorrect;
            const accuracy = totalAttemptedInQuizzes > 0 ? ((totalCorrect / totalAttemptedInQuizzes) [cite_start]* 100).toFixed(1) : 0; [cite: 600]
            [cite_start]overallAccuracy.textContent = `${accuracy}%`; [cite: 601]
        } else if (filter === 'lectures') {
            [cite_start]lectureSummary.classList.remove('hidden'); [cite: 601]
            [cite_start]const viewedLogs = appState.fullActivityLog.filter(log => log.eventType === 'ViewLecture'); [cite: 602]
            const uniqueViewedLectures = new Set(viewedLogs.map(l => l.title));
            [cite_start]lecturesViewedCount.textContent = uniqueViewedLectures.size; [cite: 602]
            [cite_start]const uniqueChapters = new Set(); [cite: 603]
            viewedLogs.forEach(log => {
                for (const chapterName in appState.groupedLectures) {
                    if (appState.groupedLectures[chapterName].topics.some(t => t.name === log.title)) {
                        uniqueChapters.add(chapterName);
                        [cite_start]break; [cite: 604]
                    }
                }
            });
            [cite_start]chaptersStartedCount.textContent = uniqueChapters.size; [cite: 605]
        }


        if (logsToDisplay.length === 0) {
            [cite_start]activityLogList.innerHTML = `<p class="text-center text-slate-500">No activity recorded for this filter.</p>`; [cite: 605]
            [cite_start]return; [cite: 606]
        }

        logsToDisplay.forEach(log => {
            const logItem = document.createElement('div');
            logItem.className = 'p-3 border rounded-lg flex flex-col sm:flex-row justify-between items-center bg-white gap-3';
            const date = new Date(log.timestamp);
            [cite_start]const formattedDate = date.toLocaleString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute:'2-digit' }); [cite: 607]

            let mainContent = '';
            if (log.eventType === 'FinishQuiz') {
                mainContent = `
                    <div class="flex-grow text-center sm:text-left">
                        [cite_start]<p class="font-bold text-slate-800">${log.title}</p> [cite: 608]
                        <p class="text-sm text-slate-500">${formattedDate}</p>
                    </div>
                    [cite_start]<div class="text-right"> [cite: 609]
                        [cite_start]<p class="font-bold text-lg ${log.score / log.total >= 0.5 ? [cite: 609]
[cite_start]'text-green-600' : 'text-red-600'}"> [cite: 610]
                            ${log.score} / ${log.total}
                        </p>
                        <p class="text-xs text-slate-500">Score</p>
                    [cite_start]</div> [cite: 611]
                `;
                if (log.isReviewable) {
                    const reviewButton = document.createElement('button');
                    [cite_start]reviewButton.innerHTML = `<i class="fas fa-redo-alt mr-2"></i> Review`; [cite: 612]
                    reviewButton.className = 'action-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg text-sm';
                    reviewButton.onclick = () => startFullQuizReview(log.logId, log.title);
                    [cite_start]logItem.appendChild(reviewButton); [cite: 613]
                }
            } else if (log.eventType === 'ViewLecture') {
                   mainContent = `
                    <div class="flex-grow text-center sm:text-left">
                        [cite_start]<p class="font-bold text-slate-800">${log.title}</p> [cite: 614]
                        <p class="text-sm text-slate-500">${formattedDate}</p>
                    </div>
                    [cite_start]<div class="text-right"> [cite: 615]
                        <p class="font-bold text-lg text-green-600"><i class="fas fa-video"></i></p>
                        <p class="text-xs text-slate-500">Viewed</p>
                    </div>
                [cite_start]`; [cite: 616]
            [cite_start]} [cite: 617]
            [cite_start]const contentWrapper = document.createElement('div'); [cite: 617]
            [cite_start]contentWrapper.className = 'flex-grow flex items-center justify-between w-full'; [cite: 618]
            contentWrapper.innerHTML = mainContent;
            logItem.prepend(contentWrapper);
            activityLogList.appendChild(logItem);
        });
    [cite_start]} [cite: 619]

    function renderActivityChart(logs) {
        if (appState.activityChartInstance) {
            [cite_start]appState.activityChartInstance.destroy(); [cite: 619]
        [cite_start]} [cite: 620]
        const labels = [];
        [cite_start]const activityByDay = {}; [cite: 620]
        [cite_start]for (let i = 6; i >= 0; i--) { [cite: 621]
            [cite_start]const d = new Date(); [cite: 621]
            [cite_start]d.setDate(d.getDate() - i); [cite: 622]
            const key = d.toISOString().split('T')[0]; // YYYY-MM-DD
            [cite_start]labels.push(d.toLocaleDateString('en-US', { weekday: 'short', day: 'numeric'})); [cite: 622]
            [cite_start]activityByDay[key] = { lectures: 0, quizzes: 0 }; [cite: 623]
        }

        logs.forEach(log => {
            const logDate = new Date(log.timestamp).toISOString().split('T')[0];
            if (activityByDay.hasOwnProperty(logDate)) {
                if (log.eventType === 'ViewLecture') {
                    [cite_start]activityByDay[logDate].lectures++; [cite: 624]
                } else if (log.eventType === 'FinishQuiz') {
                    activityByDay[logDate].quizzes++;
                }
            }
        [cite_start]}); [cite: 625]

        const lectureData = Object.values(activityByDay).map(d => d.lectures);
        const quizData = Object.values(activityByDay).map(d => d.quizzes);
        [cite_start]appState.activityChartInstance = new Chart(activityChartCanvas, { [cite: 626]
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    [cite_start]{ [cite: 627]
                        label: 'Lectures',
                        data: lectureData,
                        backgroundColor: 'rgba(20, 184, 166, 0.6)',
                        [cite_start]borderColor: 'rgb(13, 148, 136)', [cite: 628]
                        borderWidth: 1
                    },
                    [cite_start]{ [cite: 629]
                        label: 'Quizzes',
                        data: quizData,
                        backgroundColor: 'rgba(59, 130, 246, 0.6)',
                        [cite_start]borderColor: 'rgb(37, 99, 235)', [cite: 630]
                        borderWidth: 1
                    }
                ]
            [cite_start]}, [cite: 631]
            options: {
                responsive: true,
                scales: {
                    x: { stacked: true },
                    [cite_start]y: { stacked: true, beginAtZero: true, ticks: { stepSize: 1 } } [cite: 632]
                },
                plugins: {
                    [cite_start]legend: { display: true, position: 'top' }, [cite: 633]
                    title: { display: true, text: 'Your Activity in the Last 7 Days' }
                }
            }
        });
    [cite_start]} [cite: 634]

    function showSourceList(isLearningMode = false) {
        [cite_start]showScreen(listContainer); [cite: 634]
        [cite_start]if (appState.navigationHistory[appState.navigationHistory.length - 1] !== showSourceList) { [cite: 635]
           [cite_start]appState.navigationHistory.push(() => showSourceList(isLearningMode)); [cite: 635]
        [cite_start]} [cite: 636]

        [cite_start]listTitle.textContent = isLearningMode ? [cite: 636]
[cite_start]"Study by Source" : "Browse by Source"; [cite: 637]
        listItems.innerHTML = '';
        [cite_start]const sourceGroups = new Map(); [cite: 637]
        [cite_start]appState.allQuestions.forEach(q => { [cite: 638]
            const sourceName = (q.source && q.source.trim()) ? q.source.trim() : "Uncategorized";
            const normalizedKey = sourceName.toLowerCase();
            if (sourceGroups.has(normalizedKey)) {
                sourceGroups.get(normalizedKey).count++;
            [cite_start]} else { [cite: 639]
                sourceGroups.set(normalizedKey, { displayName: sourceName, count: 1 });
            }
        });
        [cite_start]const sortedSources = [...sourceGroups.values()].sort((a, b) => a.displayName.localeCompare(b.displayName)); [cite: 640]
        sortedSources.forEach(sourceGroup => {
            const button = document.createElement('button');
            button.innerHTML = `<span>${sourceGroup.displayName}</span> <span class="text-xs font-normal opacity-75">(${sourceGroup.count} Qs)</span>`;
            button.className = 'action-btn w-full p-4 rounded-lg bg-indigo-600 text-white font-semibold text-lg hover:bg-indigo-700 flex flex-col items-center justify-center text-center';
            [cite_start]button.addEventListener('click', () => showChapterList(sourceGroup.displayName, isLearningMode)); [cite: 641]
            listItems.appendChild(button);
        });
    [cite_start]} [cite: 642]

    function showChapterList(sourceFilter = 'All', isLearningMode = false) {
        [cite_start]showScreen(listContainer); [cite: 642]
        [cite_start]const prevNav = appState.navigationHistory[appState.navigationHistory.length - 1]; [cite: 643]
        if (!prevNav || prevNav.toString() !== (() => showChapterList(sourceFilter, isLearningMode)).toString()) {
            [cite_start]appState.navigationHistory.push(() => showChapterList(sourceFilter, isLearningMode)); [cite: 643]
        [cite_start]} [cite: 644]

        listTitle.textContent = sourceFilter === 'All' 
            [cite_start]? [cite: 644]
(isLearningMode ? "Select Chapters to Study" : "All Chapters") 
            [cite_start]: (isLearningMode ? `Select Chapters from ${sourceFilter}`: `Chapters in ${sourceFilter}`); [cite: 645]
        [cite_start]listItems.innerHTML = ''; [cite: 646]
        
        if (isLearningMode) {
            [cite_start]listItems.className = 'p-4 md:p-6 space-y-3'; [cite: 646]
        [cite_start]} else { [cite: 647]
            [cite_start]listItems.className = 'p-4 md:p-6 grid grid-cols-2 sm:grid-cols-3 gap-3 md:gap-4'; [cite: 647]
        [cite_start]} [cite: 648]

        [cite_start]const questionsToDisplay = (sourceFilter === 'All') ? [cite: 648]
[cite_start]appState.allQuestions : appState.allQuestions.filter(q => q.source === sourceFilter); [cite: 649]
        [cite_start]const chapters = {}; [cite: 649]
        [cite_start]questionsToDisplay.forEach(q => { [cite: 650]
            if (!chapters[q.chapter]) chapters[q.chapter] = [];
            chapters[q.chapter].push(q);
        });
        [cite_start]const sortedChapterNames = Object.keys(chapters).sort(); [cite: 651]

        if (isLearningMode) {
            // --- Learning Mode: Checkbox List ---
            [cite_start]const selectAllContainer = document.createElement('div'); [cite: 651]
            [cite_start]selectAllContainer.className = 'flex items-center p-2 border-b'; [cite: 652]
            selectAllContainer.innerHTML = `
                <input id="select-all-chapters" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500">
                <label for="select-all-chapters" class="ml-3 font-bold text-gray-700">Select All</label>
            `;
            [cite_start]listItems.appendChild(selectAllContainer); [cite: 653]

            const chapterListContainer = document.createElement('div');
            chapterListContainer.className = 'max-h-96 overflow-y-auto space-y-2 p-2';
            listItems.appendChild(chapterListContainer);
            [cite_start]sortedChapterNames.forEach(chapterName => { [cite: 654]
                const chapterId = `learn-chapter-${chapterName.replace(/[^a-zA-Z0-9]/g, '-')}`;
                const div = document.createElement('div');
                div.className = 'flex items-center';
                div.innerHTML = `
                    [cite_start]<input id="${chapterId}" name="learning-chapter" value="${chapterName}" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"> [cite: 655]
                    <label for="${chapterId}" class="ml-3 text-sm text-gray-600">${chapterName} (${chapters[chapterName].length} Qs)</label>
                `;
                chapterListContainer.appendChild(div);
            [cite_start]}); [cite: 656]

            [cite_start]const startButton = document.createElement('button'); [cite: 656]
            [cite_start]startButton.id = 'start-learning-selection-btn'; [cite: 657]
            startButton.className = 'action-btn w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg';
            startButton.textContent = 'Start Learning Session';
            [cite_start]listItems.appendChild(startButton); [cite: 658]
            
            const errorP = document.createElement('p');
            errorP.id = 'learning-selection-error';
            errorP.className = 'text-red-500 text-xs italic mt-2 text-center hidden';
            listItems.appendChild(errorP);
            [cite_start]document.getElementById('select-all-chapters').addEventListener('change', (e) => { [cite: 659]
                listItems.querySelectorAll('input[name="learning-chapter"]').forEach(checkbox => {
                    checkbox.checked = e.target.checked;
                });
            });
            [cite_start]startButton.addEventListener('click', () => { [cite: 660]
                const selectedChapters = [...listItems.querySelectorAll('input[name="learning-chapter"]:checked')].map(el => el.value);
                
                if (selectedChapters.length === 0) {
                    [cite_start]errorP.textContent = 'Please select at least one chapter to study.'; [cite: 661]
                    errorP.classList.remove('hidden');
                    return;
                }
                
                [cite_start]errorP.classList.add('hidden'); [cite: 662]

                let questionsToLearn = [];
                selectedChapters.forEach(chapterName => {
                    questionsToLearn.push(...chapters[chapterName]);
                [cite_start]}); [cite: 663]

                const title = selectedChapters.length > 1 ? 'Multiple Chapters' : selectedChapters[0];
                launchLearningMode(title, questionsToLearn);
            });
        [cite_start]} else { [cite: 664]
            // --- Quiz Mode: Original Button Logic ---
            sortedChapterNames.forEach(chapterName => {
                const button = document.createElement('button');
                button.innerHTML = `<span>${chapterName}</span> <span class="text-xs font-normal opacity-75">(${chapters[chapterName].length} Qs)</span>`;
                [cite_start]button.className = 'action-btn w-full p-4 rounded-lg bg-blue-600 text-white font-semibold text-lg hover:bg-blue-700 flex flex-col items-center justify-center text-center'; [cite: 665]
                button.addEventListener('click', () => startChapterQuiz(chapterName, chapters[chapterName]));
                listItems.appendChild(button);
            });
        [cite_start]} [cite: 666]
    }

    function startChapterQuiz(chapterName, questionsToUse) {
        [cite_start]const shuffled = [...questionsToUse].sort(() => Math.random() - 0.5); [cite: 666]
        [cite_start]launchQuiz(shuffled, chapterName); [cite: 667]
    }

    function handleMockExamStart() {
        [cite_start]mockError.classList.add('hidden'); [cite: 667]
        [cite_start]const requestedCount = parseInt(mockQCountInput.value, 10); [cite: 668]
        if (isNaN(requestedCount) || requestedCount <= 0) {
            [cite_start]mockError.textContent = "Please enter a valid number of questions."; [cite: 668]
            [cite_start]mockError.classList.remove('hidden'); [cite: 669]
            return;
        }
        [cite_start]const customTime = parseInt(customTimerInput.value, 10); [cite: 669]
        [cite_start]const selectedChapters = [...chapterSelectMock.querySelectorAll('input:checked')].map(el => el.value); [cite: 670]
        const selectedSources = [...sourceSelectMock.querySelectorAll('input:checked')].map(el => el.value);
        let filteredQuestions = appState.allQuestions;
        [cite_start]if (selectedChapters.length > 0) filteredQuestions = filteredQuestions.filter(q => selectedChapters.includes(q.chapter)); [cite: 671]
        [cite_start]if (selectedSources.length > 0) filteredQuestions = filteredQuestions.filter(q => selectedSources.includes(q.source)); [cite: 671]
        [cite_start]if (filteredQuestions.length === 0) { [cite: 672]
            [cite_start]mockError.textContent = "No questions match the selected filters."; [cite: 672]
            [cite_start]mockError.classList.remove('hidden'); [cite: 673]
            return;
        }
        if (requestedCount > filteredQuestions.length) {
            [cite_start]mockError.textContent = `Only ${filteredQuestions.length} questions match your filters.`; [cite: 673]
            [cite_start]mockError.classList.remove('hidden'); [cite: 674]
            return;
        }
        [cite_start]const shuffled = [...filteredQuestions].sort(() => Math.random() - 0.5); [cite: 674]
        [cite_start]const mockQuestions = shuffled.slice(0, requestedCount); [cite: 675]
        
        const config = {
            [cite_start]timePerQuestion: (customTime && customTime > 0) ? [cite: 675]
[cite_start]customTime : DEFAULT_TIME_PER_QUESTION [cite: 676]
        };
        [cite_start]launchQuiz(mockQuestions, "Custom Mock Exam", config); [cite: 676]
    [cite_start]} [cite: 677]

    function handleStartSimulation() {
        [cite_start]simulationError.classList.add('hidden'); [cite: 677]
        [cite_start]if (appState.allQuestions.length < SIMULATION_Q_COUNT) { [cite: 678]
            simulationError.textContent = `Not enough questions available for a full simulation.
(Required: ${SIMULATION_Q_COUNT}, Available: ${appState.allQuestions.length})[cite_start]`; [cite: 679]
            simulationError.classList.remove('hidden');
            return;
        }

        [cite_start]const shuffled = [...appState.allQuestions].sort(() => Math.random() - 0.5); [cite: 679]
        [cite_start]const simulationQuestions = shuffled.slice(0, SIMULATION_Q_COUNT); [cite: 680]
        [cite_start]const totalTimeSeconds = SIMULATION_TOTAL_TIME_MINUTES * 60; [cite: 680]
        const config = {
            isSimulation: true,
            totalTimeSeconds: totalTimeSeconds
        [cite_start]}; [cite: 681]
        [cite_start]launchQuiz(simulationQuestions, "Exam Simulation", config); [cite: 682]
    }

    function startSimulationTimer(durationInSeconds) {
        [cite_start]clearInterval(appState.currentQuiz.simulationTimerInterval); [cite: 682]
        [cite_start]let timeLeft = durationInSeconds; [cite: 683]
        timerDisplay.textContent = formatTime(timeLeft);
        appState.currentQuiz.simulationTimerInterval = setInterval(() => {
            timeLeft--;
            timerDisplay.textContent = formatTime(timeLeft);
            if (timeLeft <= 0) {
                clearInterval(appState.currentQuiz.simulationTimerInterval);
                [cite_start]triggerEndQuiz(true); // Force end due to time up [cite: 684]
            }
        }, 1000);
    [cite_start]} [cite: 685]

    function launchQuiz(questions, title, config = {}) {
        const {
            timePerQuestion = DEFAULT_TIME_PER_QUESTION,
            isReview = false,
            isMistakePractice = false,
            isSimulation = false,
            [cite_start]totalTimeSeconds = 0, [cite: 686]
            pastAnswers = null
        } = config;
        [cite_start]appState.currentQuiz.isReviewMode = isReview; [cite: 687]
        appState.currentQuiz.isPracticingMistakes = isMistakePractice;
        appState.currentQuiz.isSimulationMode = isSimulation;

        showScreen(quizContainer);
        appState.currentQuiz.currentQuestionIndex = 0;
        appState.currentQuiz.score = 0;
        appState.currentQuiz.questions = questions;
        [cite_start]if (!appState.currentQuiz.isReviewMode) { [cite: 688]
            [cite_start]appState.currentQuiz.originalQuestions = [...questions]; [cite: 688]
            [cite_start]appState.currentQuiz.userAnswers = new Array(questions.length).fill(null); [cite: 689]
            appState.currentQuiz.originalUserAnswers = appState.currentQuiz.userAnswers;
        } else {
            [cite_start]appState.currentQuiz.originalQuestions = [...questions]; [cite: 689]
            [cite_start]appState.currentQuiz.userAnswers = pastAnswers; [cite: 690]
            appState.currentQuiz.originalUserAnswers = pastAnswers;
        }

        appState.currentQuiz.flaggedIndices.clear();
        [cite_start]resultsContainer.classList.add('hidden'); [cite: 690]
        [cite_start]questionContainer.classList.remove('hidden'); [cite: 691]
        controlsContainer.classList.remove('hidden');
        quizTitle.textContent = appState.currentQuiz.isReviewMode ? `Review: ${title}` : title;
        totalQuestionsSpan.textContent = appState.currentQuiz.questions.length;
        [cite_start]if (isSimulation) { [cite: 692]
            [cite_start]startSimulationTimer(totalTimeSeconds); [cite: 692]
        [cite_start]} else { [cite: 693]
            [cite_start]appState.currentQuiz.timePerQuestion = timePerQuestion; [cite: 693]
        [cite_start]} [cite: 694]

        updateScoreBar();
        [cite_start]showQuestion(); [cite: 694]
    [cite_start]} [cite: 695]

    function updateScoreBar() {
        [cite_start]const totalQuestions = appState.currentQuiz.questions.length; [cite: 695]
        [cite_start]if (totalQuestions === 0) return; [cite: 696]
        [cite_start]const answeredQuestions = appState.currentQuiz.userAnswers.filter(a => a !== null).length; [cite: 696]
        [cite_start]const correctCount = appState.currentQuiz.userAnswers.filter(a => a && a.isCorrect).length; [cite: 697]
        const incorrectCount = answeredQuestions - correctCount;
        [cite_start]scoreProgressText.textContent = `Score: ${correctCount} / ${answeredQuestions}`; [cite: 697]
        [cite_start]scoreBarCorrect.style.width = `${(correctCount / totalQuestions) * 100}%`; [cite: 698]
        [cite_start]scoreBarIncorrect.style.width = `${(incorrectCount / totalQuestions) * 100}%`; [cite: 698]
    [cite_start]} [cite: 699]

    function showQuestion() {
        [cite_start]resetQuizState(); [cite: 699]
        [cite_start]const currentQuestion = appState.currentQuiz.questions[appState.currentQuiz.currentQuestionIndex]; [cite: 700]
        
        hintBtn.style.display = appState.currentQuiz.isSimulationMode ? [cite_start]'none' : 'block'; [cite: 700]
        [cite_start]if (currentQuestion.ImageURL) { [cite: 701]
            [cite_start]const img = document.createElement('img'); [cite: 701]
            [cite_start]img.src = currentQuestion.ImageURL; [cite: 702]
            img.alt = 'Question Image';
            img.className = 'max-h-48 rounded-lg mx-auto mb-4 cursor-pointer hover:opacity-80 transition-opacity';
            [cite_start]img.addEventListener('click', () => showImageModal(currentQuestion.ImageURL)); [cite: 702]
            [cite_start]questionImageContainer.appendChild(img); [cite: 703]
        }

        [cite_start]questionText.textContent = currentQuestion.question; [cite: 703]
        [cite_start]progressText.textContent = `Question ${appState.currentQuiz.currentQuestionIndex + 1} of ${appState.currentQuiz.questions.length}`; [cite: 704]
        sourceText.textContent = `Source: ${currentQuestion.source || 'N/A'} | Chapter: ${currentQuestion.chapter || [cite_start]'N/A'}`; [cite: 704]
        [cite_start]previousBtn.disabled = appState.currentQuiz.currentQuestionIndex === 0; [cite: 705]
        previousBtn.classList.toggle('opacity-50', appState.currentQuiz.currentQuestionIndex === 0);
        
        [cite_start]const isLastQuestion = appState.currentQuiz.currentQuestionIndex === appState.currentQuiz.questions.length - 1; [cite: 705]
        [cite_start]if (appState.currentQuiz.isReviewMode && isLastQuestion) { [cite: 706]
            [cite_start]nextSkipBtn.textContent = 'Finish Review'; [cite: 706]
        [cite_start]} else if (appState.currentQuiz.isSimulationMode && isLastQuestion) { [cite: 707]
             [cite_start]nextSkipBtn.textContent = 'Finish'; [cite: 707]
        [cite_start]} else { [cite: 708]
            [cite_start]nextSkipBtn.textContent = 'Next'; [cite: 708]
        [cite_start]} [cite: 709]
        
        [cite_start]flagBtn.classList.toggle('flagged', appState.currentQuiz.flaggedIndices.has(appState.currentQuiz.currentQuestionIndex)); [cite: 709]
        const shuffledAnswers = (appState.currentQuiz.isReviewMode || appState.currentQuiz.isSimulationMode) ? [cite_start][...currentQuestion.answerOptions] : [...currentQuestion.answerOptions].sort(() => Math.random() - 0.5); [cite: 710]
        [cite_start]shuffledAnswers.forEach(answer => { [cite: 711]
            const buttonContainer = document.createElement('div');
            const button = document.createElement('button');
            button.textContent = answer.text;
            button.className = 'answer-btn w-full text-left p-4 rounded-lg bg-slate-100 hover:bg-slate-200 border-2 border-transparent';
            
            [cite_start]button.dataset.correct = answer.isCorrect; [cite: 712]
            button.dataset.text = answer.text;
            button.addEventListener('click', (e) => selectAnswer(e, answer));
            const rationale = document.createElement('p');
            rationale.textContent = answer.rationale;
            rationale.className = 'rationale text-sm mt-2 p-2 rounded-md';
 
            [cite_start]buttonContainer.appendChild(button); [cite: 713]
            buttonContainer.appendChild(rationale);
            answerButtons.appendChild(buttonContainer);
        });
        [cite_start]const userAnswer = appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex]; [cite: 714]
        if (userAnswer !== null) {
            if (appState.currentQuiz.isSimulationMode) {
                [cite_start]const selectedButton = Array.from(answerButtons.querySelectorAll('button')).find(btn => btn.dataset.text === userAnswer.answer); [cite: 714]
                [cite_start]if (selectedButton) { [cite: 715]
                    [cite_start]selectedButton.classList.add('bg-blue-200', 'border-blue-400', 'user-choice'); [cite: 715]
                [cite_start]} [cite: 716]
                [cite_start]answerButtons.querySelectorAll('button').forEach(btn => btn.disabled = true); [cite: 716]
            [cite_start]} else { [cite: 717]
                [cite_start]showAnswerResult(); [cite: 717]
            [cite_start]} [cite: 718]
        }
        
        if (!appState.currentQuiz.isReviewMode && !appState.currentQuiz.isSimulationMode) {
            [cite_start]startTimer(); [cite: 718]
        [cite_start]} else if (appState.currentQuiz.isReviewMode) { [cite: 719]
            [cite_start]timerDisplay.textContent = 'Review'; [cite: 719]
        [cite_start]} [cite: 720]
        
        [cite_start]const hasNote = appState.userQuizNotes.some(note => note.QuizID === currentQuestion.UniqueID); [cite: 720]
        [cite_start]quizNoteBtn.classList.toggle('has-note', hasNote); [cite: 721]
    }

    function startTimer() {
        if (appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex] === null) {
            [cite_start]let timeLeft = appState.currentQuiz.timePerQuestion; [cite: 721]
            [cite_start]timerDisplay.textContent = formatTime(timeLeft); [cite: 722]
            appState.currentQuiz.timerInterval = setInterval(() => {
                timeLeft--;
                timerDisplay.textContent = formatTime(timeLeft);
                if (timeLeft <= 0) {
                    clearInterval(appState.currentQuiz.timerInterval);
                    [cite_start]handleTimeUp(); [cite: 723]
                }
            }, 1000);
        [cite_start]} else { [cite: 724]
            [cite_start]timerDisplay.textContent = 'Done'; [cite: 724]
        [cite_start]} [cite: 725]
    }

    function formatTime(seconds) {
        [cite_start]const minutes = Math.floor(seconds / 60); [cite: 725]
        [cite_start]const remainingSeconds = seconds % 60; [cite: 726]
        [cite_start]return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`; [cite: 726]
    [cite_start]} [cite: 727]

    function handleTimeUp() {
        [cite_start]appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex] = { answer: 'No Answer', isCorrect: false }; [cite: 727]
        [cite_start]showAnswerResult(); [cite: 728]
        updateScoreBar();
    }

    function resetQuizState() {
        [cite_start]clearInterval(appState.currentQuiz.timerInterval); [cite: 728]
        [cite_start]answerButtons.innerHTML = ''; [cite: 729]
        questionImageContainer.innerHTML = '';
        hintText.classList.add('hidden');
    }

    function selectAnswer(e, selectedAnswer) {
        [cite_start]if (appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex] !== null) return; [cite: 729]
        [cite_start]clearInterval(appState.currentQuiz.timerInterval); [cite: 730]
        const currentQuestion = appState.currentQuiz.questions[appState.currentQuiz.currentQuestionIndex];

        const isCorrect = selectedAnswer.isCorrect;
        [cite_start]appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex] = { answer: selectedAnswer.text, isCorrect: isCorrect }; [cite: 730]
        [cite_start]if (isCorrect) { [cite: 731]
            [cite_start]appState.currentQuiz.score++; [cite: 731]
            [cite_start]if (appState.currentQuiz.isPracticingMistakes) { [cite: 732]
                [cite_start]logCorrectedMistake(currentQuestion.UniqueID); [cite: 732]
            [cite_start]} [cite: 733]
        } else if (!appState.currentQuiz.isPracticingMistakes && !appState.currentQuiz.isSimulationMode) {
            [cite_start]logIncorrectAnswer(currentQuestion.UniqueID, selectedAnswer.text); [cite: 733]
        [cite_start]} [cite: 734]

        if (appState.currentQuiz.isSimulationMode) {
            Array.from(answerButtons.querySelectorAll('button')).forEach(btn => {
                btn.disabled = true;
                if (btn.dataset.text === selectedAnswer.text) {
                    [cite_start]btn.classList.add('bg-blue-200', 'border-blue-400', 'user-choice'); [cite: 735]
                }
            });
            [cite_start]updateScoreBar(); [cite: 736]
        } else {
            [cite_start]showAnswerResult(); [cite: 736]
            [cite_start]updateScoreBar(); [cite: 737]
            if (appState.currentQuiz.userAnswers.every(answer => answer !== null)) {
                [cite_start]setTimeout(showResults, 1000); [cite: 737]
            [cite_start]} [cite: 738]
        }
    }
    
    function showAnswerResult() {
        [cite_start]const userAnswer = appState.currentQuiz.userAnswers[appState.currentQuiz.currentQuestionIndex]; [cite: 738]
        [cite_start]Array.from(answerButtons.children).forEach(buttonContainer => { [cite: 739]
            const button = buttonContainer.querySelector('button');
            const rationale = buttonContainer.querySelector('p');
            button.disabled = true;

            if (button.dataset.correct === 'true') {
                button.classList.add('correct');
                [cite_start]rationale.classList.add('bg-green-100', 'visible'); [cite: 740]
            } else {
                if (userAnswer && button.dataset.text === userAnswer.answer) {
                    button.classList.add('incorrect', 'user-choice');
                [cite_start]} else { [cite: 741]
                     button.classList.add('incorrect');
                }
                rationale.classList.add('bg-red-100', 'visible');
            }
        [cite_start]}); [cite: 742]
        hintBtn.classList.add('hidden');
    }

    function showResults() {
        [cite_start]clearInterval(appState.currentQuiz.timerInterval); [cite: 742]
        clearInterval(appState.currentQuiz.simulationTimerInterval); [cite_start]// Stop simulation timer [cite: 743]

        questionContainer.classList.add('hidden');
        controlsContainer.classList.add('hidden');
        resultsContainer.classList.remove('hidden');
        const resultTitle = appState.currentQuiz.isSimulationMode ? "Simulation Complete!" [cite_start]: "Quiz Complete!"; [cite: 744]
        resultsTitle.textContent = resultTitle;
        [cite_start]resultsScoreText.innerHTML = `Your score is <span id="score-text" class="font-bold">${appState.currentQuiz.score}</span> out of <span id="total-questions" class="font-bold">${appState.currentQuiz.originalQuestions.length}</span>.`; [cite: 745]
        [cite_start]const incorrectCount = appState.currentQuiz.originalUserAnswers.filter(a => a && !a.isCorrect).length; [cite: 746]
        if (incorrectCount > 0) {
            [cite_start]reviewIncorrectBtn.classList.remove('hidden'); [cite: 746]
            [cite_start]reviewIncorrectBtn.textContent = `Review ${incorrectCount} Incorrect`; [cite: 747]
        } else {
            [cite_start]reviewIncorrectBtn.classList.add('hidden'); [cite: 747]
        [cite_start]} [cite: 748]

        if (!appState.currentQuiz.isReviewMode && !appState.currentQuiz.isPracticingMistakes) {
            logUserActivity({
                eventType: 'FinishQuiz',
                quizTitle: quizTitle.textContent,
                score: appState.currentQuiz.score,
                [cite_start]totalQuestions: appState.currentQuiz.originalQuestions.length [cite: 749]
            });
            [cite_start]if (appState.currentQuiz.isSimulationMode) { [cite: 750]
                appState.currentQuiz.originalQuestions.forEach((q, index) => {
                    const answer = appState.currentQuiz.originalUserAnswers[index];
                    if (answer && !answer.isCorrect) {
                        [cite_start]logIncorrectAnswer(q.UniqueID, answer.answer); [cite: 751]
                    }
                });
            [cite_start]} [cite: 752]
        }
    }

    function handleNextQuestion() {
        if (appState.currentQuiz.isSimulationMode && appState.currentQuiz.currentQuestionIndex === appState.currentQuiz.questions.length - 1) {
            [cite_start]triggerEndQuiz(true); [cite: 752]
            [cite_start]return; [cite: 753]
        }

        if (appState.currentQuiz.currentQuestionIndex < appState.currentQuiz.questions.length - 1) {
            [cite_start]appState.currentQuiz.currentQuestionIndex++; [cite: 753]
            [cite_start]showQuestion(); [cite: 754]
        } else if (appState.currentQuiz.isReviewMode) {
            [cite_start]showResults(); [cite: 754]
        [cite_start]} [cite: 755]
    }
    
    function handlePreviousQuestion() {
        if (appState.currentQuiz.currentQuestionIndex > 0) {
            [cite_start]appState.currentQuiz.currentQuestionIndex--; [cite: 755]
            [cite_start]showQuestion(); [cite: 756]
        }
    }

    function toggleFlag() {
        [cite_start]const index = appState.currentQuiz.currentQuestionIndex; [cite: 756]
        [cite_start]appState.currentQuiz.flaggedIndices.has(index) ? appState.currentQuiz.flaggedIndices.delete(index) : appState.currentQuiz.flaggedIndices.add(index); [cite: 757]
        flagBtn.classList.toggle('flagged');
    }

    function showImageModal(src) {
        [cite_start]modalImage.src = src; [cite: 757]
        [cite_start]confirmationModal.classList.add('hidden'); [cite: 758]
        questionNavigatorModal.classList.add('hidden');
        imageViewerModal.classList.remove('hidden');
        modalBackdrop.classList.remove('hidden');
    }

    function showConfirmationModal(title, text, onConfirm) {
        [cite_start]appState.modalConfirmAction = onConfirm; [cite: 758]
        [cite_start]confirmationModal.querySelector('#modal-title').textContent = title; [cite: 759]
        confirmationModal.querySelector('#modal-text').textContent = text;
        questionNavigatorModal.classList.add('hidden');
        imageViewerModal.classList.add('hidden');
        confirmationModal.classList.remove('hidden');
        [cite_start]modalBackdrop.classList.remove('hidden'); [cite: 759]
    [cite_start]} [cite: 760]

    function showQuestionNavigator() {
        [cite_start]navigatorGrid.innerHTML = ''; [cite: 760]
        [cite_start]appState.currentQuiz.questions.forEach((_, index) => { [cite: 761]
            const button = document.createElement('button');
            button.textContent = index + 1;
            button.className = 'navigator-btn w-10 h-10 rounded-md font-semibold flex items-center justify-center';
            const answer = appState.currentQuiz.userAnswers[index];
            [cite_start]if (answer === null) button.classList.add('unanswered'); [cite: 762]
            else if (answer.isCorrect) button.classList.add('correct');
            else button.classList.add('incorrect');
            if (appState.currentQuiz.flaggedIndices.has(index)) {
                const flagIcon = document.createElement('i');
                [cite_start]flagIcon.className = 'fas fa-flag flag-icon'; [cite: 763]
                button.appendChild(flagIcon);
            }
            button.addEventListener('click', () => {
                appState.currentQuiz.currentQuestionIndex = index;
                [cite_start]showQuestion(); [cite: 764]
                modalBackdrop.classList.add('hidden');
            });
            navigatorGrid.appendChild(button);
        });
        confirmationModal.classList.add('hidden');
        imageViewerModal.classList.add('hidden');
        questionNavigatorModal.classList.remove('hidden');
        [cite_start]modalBackdrop.classList.remove('hidden'); [cite: 764]
    [cite_start]} [cite: 765]

    function handleLogout() {
        showConfirmationModal('Log Out?', 'Are you sure you want to log out?', () => {
            appState.currentUser = null;
            appState.navigationHistory = [];
            usernameInput.value = '';
            [cite_start]passwordInput.value = ''; [cite: 766]
            showScreen(loginContainer);
            modalBackdrop.classList.add('hidden');
        });
    [cite_start]} [cite: 767]
    
    function triggerEndQuiz(isForced = false) {
        if (appState.currentQuiz.isReviewMode) {
            [cite_start]showMainMenuScreen(); [cite: 767]
            [cite_start]return; [cite: 768]
        }
         if (isForced) {
            [cite_start]showResults(); [cite: 768]
            [cite_start]return; [cite: 769]
        }
        showConfirmationModal('End Quiz?', 'Are you sure you want to end the quiz?', () => {
            modalBackdrop.classList.add('hidden');
            showResults();
        [cite_start]}); [cite: 769]
    [cite_start]} [cite: 770]

    function handleBackNavigation() {
        if (appState.navigationHistory.length > 1) {
            [cite_start]appState.navigationHistory.pop(); [cite: 770]
            [cite_start]const previousPage = appState.navigationHistory[appState.navigationHistory.length - 1]; [cite: 771]
            previousPage();
        }
    }

    function startFreeTest() {
        if (appState.allQuestions.length === 0) {
            [cite_start]alert("Questions are still loading, please wait a moment."); [cite: 771]
            [cite_start]return; [cite: 772]
        }
        [cite_start]const shuffled = [...appState.allQuestions].sort(() => 0.5 - Math.random()); [cite: 772]
        [cite_start]const sampleQuestions = shuffled.slice(0, 10); [cite: 773]
        appState.currentUser = { Name: 'Guest', UniqueID: `guest_${Date.now()}`, Role: 'Guest' };
        [cite_start]launchQuiz(sampleQuestions, "Free Sample Test"); [cite: 773]
    [cite_start]} [cite: 774]

    function startIncorrectReview() {
        const incorrectQuestions = appState.currentQuiz.originalQuestions.filter((question, index) => {
            const answer = appState.currentQuiz.originalUserAnswers[index];
            return answer && !answer.isCorrect;
        [cite_start]}); [cite: 774]
        [cite_start]const pastAnswers = appState.currentQuiz.originalUserAnswers.filter(a => a && !a.isCorrect); [cite: 775]
        [cite_start]const config = { isReview: true, pastAnswers: pastAnswers }; [cite: 775]
        [cite_start]launchQuiz(incorrectQuestions, quizTitle.textContent.replace('Review: ', ''), config); [cite: 776]
    }

    async function startFullQuizReview(logId, title) {
        [cite_start]showScreen(quizContainer); [cite: 776]
        [cite_start]questionContainer.classList.add('hidden'); [cite: 777]
        controlsContainer.classList.add('hidden');
        resultsContainer.classList.add('hidden');
        progressText.textContent = 'Loading review...';

        try {
            [cite_start]const response = await fetch(`${API_URL}?request=reviewQuiz&logId=${encodeURIComponent(logId)}&userId=${appState.currentUser.UniqueID}`); [cite: 777]
            [cite_start]if (!response.ok) throw new Error('Failed to fetch review data.'); [cite: 778]
            
            const data = await response.json();
            [cite_start]if (data.error) throw new Error(data.error); [cite: 778]
            [cite_start]const reviewQuestions = data.reviewData.map(item => parseQuestions([item.question])[0]); [cite: 779]
            const pastAnswers = data.reviewData.map(item => {
                const question = parseQuestions([item.question])[0];
                const correctOption = question.answerOptions.find(opt => opt.isCorrect);
                return {
                    [cite_start]answer: item.userAnswer, [cite: 780]
                    isCorrect: item.userAnswer === correctOption.text
                };
            });
            [cite_start]const config = { isReview: true, pastAnswers: pastAnswers }; [cite: 781]
            [cite_start]launchQuiz(reviewQuestions, title, config); [cite: 781]
        [cite_start]} catch (error) { [cite: 782]
            [cite_start]console.error("Error starting full quiz review:", error); [cite: 782]
            [cite_start]progressText.textContent = `Error: ${error.message}`; [cite: 783]
        }
    }
    
    // --- NOTES FUNCTIONS ---
    function showNotesScreen() {
        [cite_start]showScreen(notesContainer); [cite: 783]
        [cite_start]appState.navigationHistory.push(showNotesScreen); [cite: 784]
        renderNotes('quizzes');
    }

    function renderNotes(filter) {
        [cite_start]notesList.innerHTML = ''; [cite: 784]
        [cite_start]document.querySelectorAll('#notes-container .filter-btn').forEach(btn => btn.classList.remove('active')); [cite: 785]
        document.getElementById(`notes-filter-${filter}`).classList.add('active');

        [cite_start]const notesToDisplay = filter === 'quizzes' ? appState.userQuizNotes : appState.userLectureNotes; [cite: 785]
        [cite_start]if (notesToDisplay.length === 0) { [cite: 786]
            [cite_start]notesList.innerHTML = `<p class="text-center text-slate-500">No notes found for this category.</p>`; [cite: 786]
            [cite_start]return; [cite: 787]
        }

        notesToDisplay.forEach(note => {
            const noteItem = document.createElement('div');
            noteItem.className = 'p-4 bg-white rounded-lg border border-slate-200 shadow-sm';
            
            let title = 'Note';
            [cite_start]let itemId = null; [cite: 788]
            let noteType = '';

            if (filter === 'quizzes') {
                const question = appState.allQuestions.find(q => q.UniqueID === note.QuizID);
                title = question 
? [cite_start]`Note on: ${question.question.substring(0, 50)}...` : 'Note on deleted question'; [cite: 789]
                itemId = note.QuizID;
                noteType = 'quiz';
            } else {
                [cite_start]const lecture = Object.values(appState.groupedLectures).flatMap(c => c.topics).find(t => t.id === note.LectureID); [cite: 790]
                title = lecture ? `Note on: ${lecture.name}` : 'Note on deleted lecture';
                itemId = note.LectureID;
                noteType = 'lecture';
            [cite_start]} [cite: 790]

            noteItem.innerHTML = `
                <div class="flex justify-between items-start">
                    <h4 class="font-bold text-slate-700 flex-grow">${title}</h4>
                    <div class="flex-shrink-0 ml-4">
                        [cite_start]<button class="edit-note-btn text-blue-500 hover:text-blue-700 mr-2" title="Edit Note"><i class="fas fa-edit"></i></button> [cite: 792]
                        <button class="delete-note-btn text-red-500 hover:text-red-700" title="Delete Note"><i class="fas fa-trash"></i></button>
                    </div>
                [cite_start]</div> [cite: 793]
                <p class="text-slate-600 mt-2 whitespace-pre-wrap">${note.NoteText}</p>
            `;
            [cite_start]noteItem.querySelector('.edit-note-btn').addEventListener('click', () => { [cite: 794]
                openNoteModal(noteType, itemId, title.replace('Note on: ', ''));
            });
            [cite_start]noteItem.querySelector('.delete-note-btn').addEventListener('click', () => { [cite: 795]
                handleDeleteNote(noteType, note.UniqueID);
            });
            [cite_start]notesList.appendChild(noteItem); [cite: 796]
        });
    }

    function openNoteModal(type, itemId, itemTitle) {
        [cite_start]appState.currentNote = { type, itemId, itemTitle }; [cite: 796]
        [cite_start]let existingNote; [cite: 797]

        if (type === 'quiz') {
            [cite_start]noteModalTitle.textContent = `Note on: ${itemTitle.substring(0, 40)}...`; [cite: 797]
            [cite_start]existingNote = appState.userQuizNotes.find(n => n.QuizID === itemId); [cite: 798]
        } else { // 'lecture'
            [cite_start]noteModalTitle.textContent = `Note on: ${itemTitle}`; [cite: 798]
            [cite_start]existingNote = appState.userLectureNotes.find(n => n.LectureID === itemId); [cite: 799]
        }

        [cite_start]noteTextarea.value = existingNote ? [cite: 799]
[cite_start]existingNote.NoteText : ''; [cite: 800]
        modalBackdrop.classList.remove('hidden');
        noteModal.classList.remove('hidden');
        imageViewerModal.classList.add('hidden');
        questionNavigatorModal.classList.add('hidden');
        confirmationModal.classList.add('hidden');
    }

    function handleSaveNote() {
        [cite_start]const noteText = noteTextarea.value; [cite: 800]
        [cite_start]const { type, itemId } = appState.currentNote; [cite: 801]
        [cite_start]const uniqueId = `${appState.currentUser.UniqueID}_${itemId}`; [cite: 801]
        const payload = {
            [cite_start]eventType: type === 'quiz' ? [cite: 802]
[cite_start]'saveQuizNote' : 'saveLectureNote', [cite: 803]
            uniqueId: uniqueId,
            userId: appState.currentUser.UniqueID,
            itemId: itemId,
            noteText: noteText
        [cite_start]}; [cite: 803]
        fetch(API_URL, {
            method: 'POST',
            mode: 'no-cors',
            body: JSON.stringify(payload)
        [cite_start]}).catch(err => console.error("Failed to save note:", err)); [cite: 804]
        [cite_start]// Update local data for immediate UI feedback [cite: 805]
        if (type === 'quiz') {
            [cite_start]const existingNoteIndex = appState.userQuizNotes.findIndex(n => n.QuizID === itemId); [cite: 805]
            [cite_start]if (existingNoteIndex > -1) { [cite: 806]
                [cite_start]appState.userQuizNotes[existingNoteIndex].NoteText = noteText; [cite: 806]
            [cite_start]} else { [cite: 807]
                [cite_start]appState.userQuizNotes.push({ UniqueID: uniqueId, QuizID: itemId, NoteText: noteText }); [cite: 807]
            [cite_start]} [cite: 808]
            if (quizContainer.style.display !== 'none') {
                [cite_start]quizNoteBtn.classList.toggle('has-note', noteText.length > 0); [cite: 808]
            [cite_start]} [cite: 809]
        } else {
            [cite_start]const existingNoteIndex = appState.userLectureNotes.findIndex(n => n.LectureID === itemId); [cite: 809]
            [cite_start]if (existingNoteIndex > -1) { [cite: 810]
                [cite_start]appState.userLectureNotes[existingNoteIndex].NoteText = noteText; [cite: 810]
            [cite_start]} else { [cite: 811]
                [cite_start]appState.userLectureNotes.push({ UniqueID: uniqueId, LectureID: itemId, NoteText: noteText }); [cite: 811]
            [cite_start]} [cite: 812]
            [cite_start]renderLectures(lectureSearchInput.value); [cite: 812]
            [cite_start]// Re-render to update icon [cite: 813]
        }

        [cite_start]modalBackdrop.classList.add('hidden'); [cite: 813]
        [cite_start]noteModal.classList.add('hidden'); [cite: 814]
    }

    function handleDeleteNote(noteType, uniqueId) {
        showConfirmationModal('Delete Note?', 'Are you sure you want to permanently delete this note?', () => {
            const payload = {
                eventType: noteType === 'quiz' ? 'deleteQuizNote' : 'deleteLectureNote',
                [cite_start]uniqueId: uniqueId [cite: 815]
            };

            fetch(API_URL, {
                method: 'POST',
                mode: 'no-cors',
                [cite_start]body: JSON.stringify(payload) [cite: 816]
            }).catch(err => console.error("Failed to delete note:", err));

            // Update local data for immediate UI feedback
            if (noteType === 'quiz') {
                appState.userQuizNotes = appState.userQuizNotes.filter(n => n.UniqueID !== uniqueId);
            [cite_start]} else { [cite: 817]
                appState.userLectureNotes = appState.userLectureNotes.filter(n => n.UniqueID !== uniqueId);
            }
            
            // Re-render the currently visible screen if it's affected
            [cite_start]if (notesContainer.style.display !== 'none') { [cite: 818]
                [cite_start]renderNotes(notesFilterQuizzes.classList.contains('active') ? [cite: 818]
[cite_start]'quizzes' : 'lectures'); [cite: 819]
            } else if (lecturesContainer.style.display !== 'none') {
                [cite_start]renderLectures(lectureSearchInput.value); [cite: 819]
            [cite_start]} else if (quizContainer.style.display !== 'none') { [cite: 820]
                [cite_start]const currentQuestion = appState.currentQuiz.questions[appState.currentQuiz.currentQuestionIndex]; [cite: 820]
                [cite_start]const hasNote = appState.userQuizNotes.some(note => note.QuizID === currentQuestion.UniqueID); [cite: 821]
                [cite_start]quizNoteBtn.classList.toggle('has-note', hasNote); [cite: 821]
            [cite_start]} [cite: 822]

            modalBackdrop.classList.add('hidden');
        [cite_start]}); [cite: 822]
    [cite_start]} [cite: 823]

    function handleClearLogs(logType) {
        let eventType = '';
        [cite_start]if (logType === 'quiz') eventType = 'clearQuizLogs'; [cite: 824]
        [cite_start]else if (logType === 'lecture') eventType = 'clearLectureLogs'; [cite: 824]
        [cite_start]else if (logType === 'all') eventType = 'clearAllLogs'; [cite: 825]
        else return;
        const payload = {
            eventType: eventType,
            userId: appState.currentUser.UniqueID
        [cite_start]}; [cite: 826]
        fetch(API_URL, {
            method: 'POST',
            mode: 'no-cors',
            body: JSON.stringify(payload)
        [cite_start]}).catch(err => console.error("Failed to clear logs:", err)); [cite: 827]
        [cite_start]// Update local data for immediate UI feedback [cite: 828]
        if (logType === 'quiz') {
            [cite_start]appState.fullActivityLog = appState.fullActivityLog.filter(log => log.eventType !== 'FinishQuiz'); [cite: 828]
        [cite_start]} else if (logType === 'lecture') { [cite: 829]
            [cite_start]appState.fullActivityLog = appState.fullActivityLog.filter(log => log.eventType !== 'ViewLecture'); [cite: 829]
        [cite_start]} else { [cite: 830]
            [cite_start]appState.fullActivityLog = []; [cite: 830]
        [cite_start]} [cite: 831]
        renderFilteredLog('all');
        modalBackdrop.classList.add('hidden');
        [cite_start]clearLogModal.classList.add('hidden'); [cite: 831]
    [cite_start]} [cite: 832]

    function updateWatermark(user) {
        [cite_start]const watermarkOverlay = document.getElementById('watermark-overlay'); [cite: 832]
        [cite_start]if (!user || user.Role === 'Guest') { [cite: 833]
            [cite_start]watermarkOverlay.classList.add('hidden'); [cite: 833]
            [cite_start]return; [cite: 834]
        }

        [cite_start]watermarkOverlay.innerHTML = ''; [cite: 834]
        [cite_start]// Clear previous watermark [cite: 835]
        [cite_start]const date = new Date().toLocaleDateString('en-GB'); [cite: 835]
        [cite_start]const watermarkItem = document.createElement('div'); [cite: 836]
        [cite_start]watermarkItem.className = 'flex flex-col items-end text-slate-900'; [cite: 836]
        watermarkItem.innerHTML = `
            <img src="https://raw.githubusercontent.com/doctorbishoy/Plasticology-/main/Plasticology%202025%20Logo%20white%20outline.png" alt="Logo" class="h-10 opacity-50" style="filter: invert(1);">
            <span class="font-semibold text-xs">${user.Name}</span>
            <span class="text-xs">${date}</span>
        [cite_start]`; [cite: 837]
        [cite_start]watermarkOverlay.appendChild(watermarkItem); [cite: 838]
    }

    async function startIncorrectQuestionsQuiz() {
        [cite_start]loader.classList.remove('hidden'); [cite: 838]
        [cite_start]loadingText.textContent = 'Loading your mistakes...'; [cite: 839]
        loadingText.classList.remove('hidden');
        try {
            [cite_start]const response = await fetch(`${API_URL}?request=getIncorrectQuestions&userId=${appState.currentUser.UniqueID}&t=${new Date().getTime()}`); [cite: 839]
            [cite_start]if (!response.ok) throw new Error('Failed to fetch your mistakes.'); [cite: 840]
            
            const data = await response.json();
            [cite_start]if (data.error) throw new Error(data.error); [cite: 840]
            [cite_start]if (data.questions.length === 0) { [cite: 841]
                [cite_start]showConfirmationModal('All Clear!', 'You have no incorrect questions to practice. Well done!', () => modalBackdrop.classList.add('hidden')); [cite: 841]
                [cite_start]return; [cite: 842]
            }
            
            [cite_start]const mistakeQuestions = parseQuestions(data.questions); [cite: 842]
            [cite_start]const shuffled = [...mistakeQuestions].sort(() => Math.random() - 0.5); [cite: 843]
            [cite_start]launchQuiz(shuffled, "Practice Mistakes", { isMistakePractice: true }); [cite: 843]
        [cite_start]} catch (error) { [cite: 844]
            [cite_start]console.error("Error starting mistake practice:", error); [cite: 844]
            [cite_start]mockError.textContent = error.message; [cite: 845]
            mockError.classList.remove('hidden');
        } finally {
            [cite_start]loader.classList.add('hidden'); [cite: 845]
            [cite_start]loadingText.classList.add('hidden'); [cite: 846]
        }
    }
    
    async function startBookmarkedQuestionsQuiz() {
        [cite_start]const bookmarkedIds = Array.from(appState.bookmarkedQuestions); [cite: 846]
        [cite_start]if (bookmarkedIds.length === 0) { [cite: 847]
            [cite_start]showConfirmationModal('No Bookmarks', 'You have not bookmarked any questions yet.', () => modalBackdrop.classList.add('hidden')); [cite: 847]
            [cite_start]return; [cite: 848]
        }
        
        [cite_start]const bookmarkedQuestions = appState.allQuestions.filter(q => bookmarkedIds.includes(q.UniqueID)); [cite: 848]
        [cite_start]const shuffled = [...bookmarkedQuestions].sort(() => Math.random() - 0.5); [cite: 849]
        [cite_start]launchQuiz(shuffled, "Bookmarked Questions"); [cite: 849]
    [cite_start]} [cite: 850]

    function logIncorrectAnswer(questionId, userAnswer) {
        const payload = {
            eventType: 'logIncorrectAnswer',
            userId: appState.currentUser.UniqueID,
            questionId: questionId,
            userAnswer: userAnswer
        [cite_start]}; [cite: 851]
        fetch(API_URL, { method: 'POST', mode: 'no-cors', body: JSON.stringify(payload) })
            [cite_start].catch(err => console.error("Failed to log incorrect answer:", err)); [cite: 851]
    [cite_start]} [cite: 852]

    function logCorrectedMistake(questionId) {
        const payload = {
            eventType: 'logCorrectedMistake',
            userId: appState.currentUser.UniqueID,
            questionId: questionId
        [cite_start]}; [cite: 852]
        fetch(API_URL, { method: 'POST', mode: 'no-cors', body: JSON.stringify(payload) })
            [cite_start].catch(err => console.error("Failed to log corrected mistake:", err)); [cite: 853]
    [cite_start]} [cite: 854]

    function displayAnnouncement() {
        [cite_start]const banner = document.getElementById('announcement-banner'); [cite: 854]
        [cite_start]if (appState.allAnnouncements.length === 0) { [cite: 855]
            [cite_start]banner.classList.add('hidden'); [cite: 855]
            [cite_start]return; [cite: 856]
        }

        [cite_start]const latestAnnouncement = appState.allAnnouncements[0]; [cite: 856]
        [cite_start]const seenAnnouncementId = localStorage.getItem('seenAnnouncementId'); [cite: 857]
        
        if (seenAnnouncementId === latestAnnouncement.UniqueID) {
            [cite_start]banner.classList.add('hidden'); [cite: 857]
            [cite_start]return; [cite: 858]
        }

        banner.innerHTML = `
            <div class="mb-4 p-4 bg-indigo-100 border-l-4 border-indigo-500 text-indigo-700 rounded-lg relative">
                <div class="flex">
                    <div class="py-1"><i class="fas fa-bullhorn fa-lg mr-4"></i></div>
                    [cite_start]<div> [cite: 859]
                        <p class="font-bold">Latest Update</p>
                        <p class="text-sm">${latestAnnouncement.UpdateMessage}</p>
                    </div>
                [cite_start]</div> [cite: 860]
                <button id="close-announcement-btn" class="absolute top-0 bottom-0 right-0 px-4 py-3">&times;</button>
            </div>
        `;
        [cite_start]banner.classList.remove('hidden'); [cite: 861]

        document.getElementById('close-announcement-btn').addEventListener('click', () => {
            banner.classList.add('hidden');
            localStorage.setItem('seenAnnouncementId', latestAnnouncement.UniqueID);
        [cite_start]}); [cite: 862]
    }
    
    function showAnnouncementsModal() {
        [cite_start]announcementsList.innerHTML = ''; [cite: 862]
        [cite_start]if (appState.allAnnouncements.length === 0) { [cite: 863]
            [cite_start]announcementsList.innerHTML = `<p class="text-center text-slate-500">No announcements right now.</p>`; [cite: 863]
        [cite_start]} else { [cite: 864]
            appState.allAnnouncements.forEach(ann => {
                const annItem = document.createElement('div');
                annItem.className = 'p-3 border-b';
                const date = new Date(ann.TimeStamp).toLocaleDateString('en-GB');
                annItem.innerHTML = `
                    [cite_start]<p class="font-bold text-slate-700">${ann.UpdateMessage}</p> [cite: 865]
                    <p class="text-xs text-slate-400 text-right mt-1">${date}</p>
                `;
                [cite_start]announcementsList.appendChild(annItem); [cite: 866]
            });
        [cite_start]} [cite: 867]
        modalBackdrop.classList.remove('hidden');
        [cite_start]announcementsModal.classList.remove('hidden'); [cite: 867]
    [cite_start]} [cite: 868]

    // --- OSCE Functions ---
    function showOsceScreen() {
        [cite_start]showScreen(osceContainer); [cite: 868]
        [cite_start]appState.navigationHistory.push(showOsceScreen); [cite: 869]
    }

    function startOsceSlayer() {
        [cite_start]const casesWithQuestions = appState.allOsceCases.filter(c => appState.allOsceQuestions.some(q => q.CaseID === c.CaseID)); [cite: 869]
        [cite_start]if (casesWithQuestions.length === 0) { [cite: 870]
            [cite_start]osceError.textContent = "No OSCE cases with questions are available to start."; [cite: 870]
            [cite_start]osceError.classList.remove('hidden'); [cite: 871]
            return;
        }
        [cite_start]const shuffled = [...casesWithQuestions].sort(() => Math.random() - 0.5); [cite: 871]
        const totalQuestions = shuffled.reduce((acc, currentCase) => {
            return acc + appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID).length;
        [cite_start]}, 0); [cite: 872]
        const totalDuration = totalQuestions * 60; [cite_start]// 1 minute per question [cite: 873]
        [cite_start]startOsceQuiz(shuffled, "OSCE Slayer", totalDuration); [cite: 873]
    [cite_start]} [cite: 874]

    function startCustomOsce() {
        [cite_start]osceError.classList.add('hidden'); [cite: 874]
        [cite_start]const requestedCount = parseInt(osceCaseCountInput.value, 10); [cite: 875]
        if (isNaN(requestedCount) || requestedCount <= 0) {
            [cite_start]osceError.textContent = "Please enter a valid number of cases."; [cite: 875]
            [cite_start]osceError.classList.remove('hidden'); [cite: 876]
            return;
        }

        [cite_start]const timePerQ = parseInt(osceTimePerQInput.value, 10) || [cite: 876]
1; [cite_start]// Default to 1 minute [cite: 877]
        [cite_start]const timePerQSeconds = timePerQ * 60; [cite: 877]
        [cite_start]const selectedChapters = [...chapterSelectOsce.querySelectorAll('input:checked')].map(el => el.value); [cite: 878]
        const selectedSources = [...sourceSelectOsce.querySelectorAll('input:checked')].map(el => el.value);
        
        [cite_start]let filteredCases = appState.allOsceCases; [cite: 878]
        [cite_start]if (selectedChapters.length > 0) filteredCases = filteredCases.filter(c => selectedChapters.includes(c.Chapter)); [cite: 879]
        [cite_start]if (selectedSources.length > 0) filteredCases = filteredCases.filter(c => selectedSources.includes(c.Source)); [cite: 879]
        [cite_start]const casesWithQuestions = filteredCases.filter(c => appState.allOsceQuestions.some(q => q.CaseID === c.CaseID)); [cite: 880]
        [cite_start]if (casesWithQuestions.length === 0) { [cite: 881]
            [cite_start]osceError.textContent = "No cases with questions match the selected filters."; [cite: 881]
            [cite_start]osceError.classList.remove('hidden'); [cite: 882]
            return;
        }
        if (requestedCount > casesWithQuestions.length) {
            [cite_start]osceError.textContent = `Only ${casesWithQuestions.length} cases match your filters.`; [cite: 882]
            [cite_start]osceError.classList.remove('hidden'); [cite: 883]
            return;
        }

        [cite_start]const shuffled = [...casesWithQuestions].sort(() => Math.random() - 0.5); [cite: 883]
        [cite_start]const mockCases = shuffled.slice(0, requestedCount); [cite: 884]

        const totalQuestions = mockCases.reduce((acc, currentCase) => {
            return acc + appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID).length;
        [cite_start]}, 0); [cite: 884]
        [cite_start]const totalDuration = totalQuestions * timePerQSeconds; [cite: 885]
        [cite_start]startOsceQuiz(mockCases, "Custom OSCE", totalDuration); [cite: 885]
    }
    
    function startOsceQuiz(cases, title, totalDuration) {
        [cite_start]appState.currentOsce.cases = cases; [cite: 886]
        [cite_start]appState.currentOsce.caseIndex = 0; [cite: 887]
        appState.currentOsce.questionIndex = 0;
        appState.currentOsce.userAnswers = {};
        appState.currentOsce.score = 0;
        [cite_start]appState.currentOsce.totalQuestions = cases.reduce((acc, c) => acc + appState.allOsceQuestions.filter(q => q.CaseID === c.CaseID).length, 0); [cite: 888]

        showScreen(osceQuizContainer);
        [cite_start]resultsContainer.classList.add('hidden'); [cite: 888]
        [cite_start]// Hide results from previous quiz [cite: 889]
        [cite_start]osceQuizTitle.textContent = title; [cite: 889]
        [cite_start]startOsceTimer(totalDuration); [cite: 890]
        updateOsceScoreDisplay();
        renderOsceQuestion();
    }

    function renderOsceQuestion() {
        [cite_start]const { cases, caseIndex, questionIndex } = appState.currentOsce; [cite: 890]
        [cite_start]const currentCase = cases[caseIndex]; [cite: 891]
        const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID);
        [cite_start]const currentQuestion = caseQuestions[questionIndex]; [cite: 891]
        [cite_start]if (!currentQuestion) { [cite: 892]
            [cite_start]console.error("OSCE Error: Could not find a question for the current case/index.", { case: currentCase, index: questionIndex }); [cite: 892]
            [cite_start]handleOsceNext(); [cite: 893]
            return;
        }

        // Render Case Info
        [cite_start]osceCaseTitle.textContent = currentCase.Title; [cite: 893]
        [cite_start]osceCaseDescription.textContent = currentCase.CaseDescription; [cite: 894]
        osceCaseImageContainer.innerHTML = '';
        if (currentCase.ImageURL) {
            [cite_start]const img = document.createElement('img'); [cite: 894]
            [cite_start]img.src = currentCase.ImageURL; [cite: 895]
            img.alt = 'Case Image';
            img.className = 'max-h-64 rounded-lg mx-auto mb-4 cursor-pointer';
            img.addEventListener('click', () => showImageModal(currentCase.ImageURL));
            [cite_start]osceCaseImageContainer.appendChild(img); [cite: 895]
        [cite_start]} [cite: 896]

        // Render Question Info
        [cite_start]osceProgressText.textContent = `Case ${caseIndex + 1}/${cases.length} - Question ${questionIndex + 1}/${caseQuestions.length}`; [cite: 896]
        [cite_start]osceQuestionText.textContent = currentQuestion.QuestionText; [cite: 897]
        osceQuestionImageContainer.innerHTML = '';
        if (currentQuestion.ImageURL) {
            [cite_start]const img = document.createElement('img'); [cite: 897]
            [cite_start]img.src = currentQuestion.ImageURL; [cite: 898]
            img.alt = 'Question Image';
            img.className = 'max-h-48 rounded-lg mx-auto mb-4 cursor-pointer';
            img.addEventListener('click', () => showImageModal(currentQuestion.ImageURL));
            [cite_start]osceQuestionImageContainer.appendChild(img); [cite: 898]
        [cite_start]} [cite: 899]

        // Render Answer Area
        [cite_start]osceAnswerArea.innerHTML = ''; [cite: 899]
        [cite_start]osceModelAnswerArea.innerHTML = ''; [cite: 900]
        osceModelAnswerArea.classList.add('hidden');
        osceSelfCorrectionArea.innerHTML = '';
        osceSelfCorrectionArea.classList.add('hidden');
        
        const answerKey = `${currentCase.CaseID}_${currentQuestion.QuestionID}`;
        const userAnswer = appState.currentOsce.userAnswers[answerKey];
        [cite_start]if (currentQuestion.QuestionType === 'MCQ') { [cite: 901]
            [cite_start]const shuffledAnswers = [...currentQuestion.answerOptions].sort(() => Math.random() - 0.5); [cite: 901]
            [cite_start]shuffledAnswers.forEach(answer => { [cite: 902]
                const button = document.createElement('button');
                button.textContent = answer.text;
                button.className = 'answer-btn w-full text-left p-4 rounded-lg bg-slate-100 hover:bg-slate-200 border-2 border-transparent';
                button.dataset.correct = answer.isCorrect;
 
                [cite_start]button.dataset.text = answer.text; [cite: 903]
                button.addEventListener('click', () => selectOsceAnswer(answer));
                osceAnswerArea.appendChild(button);
            });
            [cite_start]if (userAnswer) { [cite: 904]
                [cite_start]showOsceMcqResult(); [cite: 904]
            [cite_start]} [cite: 905]
        } else { // Essay or default
            if (userAnswer) {
                [cite_start]osceModelAnswerArea.innerHTML = `<p class="font-semibold">Model Answer:</p><p>${currentQuestion.EssayModelAnswer}</p>`; [cite: 905]
                [cite_start]osceModelAnswerArea.classList.remove('hidden'); [cite: 906]
                osceSelfCorrectionArea.innerHTML = `<p class="text-center font-bold text-slate-600">You marked this as ${userAnswer.isCorrect ? [cite_start]'Correct' : 'Incorrect'}.</p>`; [cite: 906]
                [cite_start]osceSelfCorrectionArea.classList.remove('hidden'); [cite: 906]
            [cite_start]} else { [cite: 907]
                [cite_start]const showAnswerBtn = document.createElement('button'); [cite: 907]
                [cite_start]showAnswerBtn.textContent = 'Show Model Answer'; [cite: 908]
                showAnswerBtn.className = 'action-btn bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700';
                [cite_start]showAnswerBtn.onclick = () => { [cite: 909]
                    [cite_start]osceModelAnswerArea.innerHTML = `<p class="font-semibold">Model Answer:</p><p>${currentQuestion.EssayModelAnswer}</p>`; [cite: 909]
                    [cite_start]osceModelAnswerArea.classList.remove('hidden'); [cite: 910]
                    showAnswerBtn.classList.add('hidden');
                    osceSelfCorrectionArea.classList.remove('hidden');
                    osceSelfCorrectionArea.innerHTML = `
                        <p class="text-center font-semibold mb-2">Did you get it right?</p>
                        <div class="flex justify-center gap-4">
                            [cite_start]<button class="self-correct-btn action-btn bg-green-500 text-white font-bold py-2 px-4 rounded-lg" data-correct="true">Correct</button> [cite: 911]
                            <button class="self-correct-btn action-btn bg-red-500 text-white font-bold py-2 px-4 rounded-lg" data-correct="false">Incorrect</button>
                        </div>
                    [cite_start]`; [cite: 912]
                    osceSelfCorrectionArea.querySelectorAll('.self-correct-btn').forEach(btn => {
                        btn.addEventListener('click', (e) => handleOsceSelfCorrection(e.target.dataset.correct === 'true'));
                    [cite_start]}); [cite: 912]
                [cite_start]}; [cite: 913]
                osceAnswerArea.appendChild(showAnswerBtn);
            }
        }

        // Update button states
        [cite_start]oscePreviousBtn.disabled = caseIndex === 0 && questionIndex === 0; [cite: 913]
        osceNextBtn.textContent = (caseIndex === cases.length - 1 && questionIndex === caseQuestions.length - 1) ? [cite_start]'Finish' : 'Next'; [cite: 914]
    [cite_start]} [cite: 915]

    function selectOsceAnswer(selectedAnswer) {
        [cite_start]const { cases, caseIndex, questionIndex } = appState.currentOsce; [cite: 915]
        [cite_start]const currentCase = cases[caseIndex]; [cite: 916]
        const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID);
        const currentQuestion = caseQuestions[questionIndex];
        [cite_start]if (!currentQuestion) return; [cite: 916]
        [cite_start]const answerKey = `${currentCase.CaseID}_${currentQuestion.QuestionID}`; [cite: 917]
        if (appState.currentOsce.userAnswers[answerKey]) return; // Already answered

        [cite_start]appState.currentOsce.userAnswers[answerKey] = { answer: selectedAnswer.text, isCorrect: selectedAnswer.isCorrect }; [cite: 917]
        [cite_start]if (selectedAnswer.isCorrect) { [cite: 918]
            [cite_start]appState.currentOsce.score++; [cite: 918]
        [cite_start]} [cite: 919]
        updateOsceScoreDisplay();
        [cite_start]showOsceMcqResult(); [cite: 919]
    [cite_start]} [cite: 920]

    function showOsceMcqResult() {
        [cite_start]const { cases, caseIndex, questionIndex, userAnswers } = appState.currentOsce; [cite: 920]
        [cite_start]const currentCase = cases[caseIndex]; [cite: 921]
        const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID);
        const currentQuestion = caseQuestions[questionIndex];
        [cite_start]const answerKey = `${currentCase.CaseID}_${currentQuestion.QuestionID}`; [cite: 921]
        [cite_start]const userAnswer = userAnswers[answerKey]; [cite: 922]

        Array.from(osceAnswerArea.querySelectorAll('.answer-btn')).forEach(button => {
            button.disabled = true;
            if (button.dataset.correct === 'true') {
                button.classList.add('correct');
            } else if (userAnswer && button.dataset.text === userAnswer.answer) {
                [cite_start]button.classList.add('incorrect', 'user-choice'); [cite: 923]
            }
        });
    [cite_start]} [cite: 924]

    function handleOsceSelfCorrection(isCorrect) {
        [cite_start]const { cases, caseIndex, questionIndex } = appState.currentOsce; [cite: 924]
        [cite_start]const currentCase = cases[caseIndex]; [cite: 925]
        const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID);
        const currentQuestion = caseQuestions[questionIndex];
        [cite_start]const answerKey = `${currentCase.CaseID}_${currentQuestion.QuestionID}`; [cite: 925]
        if (appState.currentOsce.userAnswers[answerKey]) return; [cite_start]// Already answered [cite: 926]

        [cite_start]appState.currentOsce.userAnswers[answerKey] = { answer: isCorrect ? [cite: 926]
[cite_start]'Correct' : 'Incorrect', isCorrect: isCorrect }; [cite: 927]
        if (isCorrect) {
            [cite_start]appState.currentOsce.score++; [cite: 927]
        [cite_start]} [cite: 928]
        updateOsceScoreDisplay();
        [cite_start]osceSelfCorrectionArea.innerHTML = `<p class="text-center font-bold text-slate-600">Your answer has been recorded.</p>`; [cite: 929]
    [cite_start]} [cite: 930]

    function updateOsceScoreDisplay() {
        [cite_start]const { score, totalQuestions } = appState.currentOsce; [cite: 930]
        [cite_start]osceScoreDisplay.textContent = `Score: ${score}/${totalQuestions}`; [cite: 931]
    }

    function startOsceTimer(durationInSeconds) {
        [cite_start]clearInterval(appState.currentOsce.timerInterval); [cite: 931]
        [cite_start]let timeLeft = durationInSeconds; [cite: 932]
        osceTimer.textContent = formatTime(timeLeft);
        appState.currentOsce.timerInterval = setInterval(() => {
            timeLeft--;
            osceTimer.textContent = formatTime(timeLeft);
            if (timeLeft <= 0) {
                clearInterval(appState.currentOsce.timerInterval);
                [cite_start]endOsceQuiz(true); // Force end due to time up [cite: 933]
            }
        }, 1000);
    [cite_start]} [cite: 934]

    function handleOsceNext() {
        [cite_start]const { cases, caseIndex, questionIndex } = appState.currentOsce; [cite: 934]
        [cite_start]const currentCase = cases[caseIndex]; [cite: 935]
        [cite_start]const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === currentCase.CaseID); [cite: 935]
        [cite_start]if (questionIndex < caseQuestions.length - 1) { [cite: 936]
            [cite_start]appState.currentOsce.questionIndex++; [cite: 936]
        [cite_start]} else if (caseIndex < cases.length - 1) { [cite: 937]
            [cite_start]appState.currentOsce.caseIndex++; [cite: 937]
            [cite_start]appState.currentOsce.questionIndex = 0; [cite: 938]
        } else {
            [cite_start]endOsceQuiz(true); [cite: 938]
            [cite_start]// Force end as it's the last question [cite: 939]
            return;
        [cite_start]} [cite: 939]
        [cite_start]renderOsceQuestion(); [cite: 940]
    [cite_start]} [cite: 941]

    function handleOscePrevious() {
        if (appState.currentOsce.questionIndex > 0) {
            [cite_start]appState.currentOsce.questionIndex--; [cite: 941]
        [cite_start]} else if (appState.currentOsce.caseIndex > 0) { [cite: 942]
            [cite_start]appState.currentOsce.caseIndex--; [cite: 942]
            [cite_start]const prevCase = appState.currentOsce.cases[appState.currentOsce.caseIndex]; [cite: 943]
            const prevCaseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === prevCase.CaseID);
            [cite_start]appState.currentOsce.questionIndex = prevCaseQuestions.length - 1; [cite: 943]
        [cite_start]} [cite: 944]
        [cite_start]renderOsceQuestion(); [cite: 944]
    [cite_start]} [cite: 945]

    function endOsceQuiz(isForced = false) {
        [cite_start]clearInterval(appState.currentOsce.timerInterval); [cite: 945]
        [cite_start]if (isForced) { [cite: 946]
            [cite_start]showOsceResults(); [cite: 946]
        [cite_start]} else { [cite: 947]
            showConfirmationModal('End OSCE?', 'Are you sure you want to end this OSCE session?', () => {
                modalBackdrop.classList.add('hidden');
                showOsceResults();
            });
        [cite_start]} [cite: 948]
    }

    function showOsceResults() {
        [cite_start]showScreen(quizContainer); [cite: 948]
        [cite_start]questionContainer.classList.add('hidden'); [cite: 949]
        controlsContainer.classList.add('hidden');
        
        resultsContainer.classList.remove('hidden');
        
        resultsTitle.textContent = "OSCE Complete!";
        [cite_start]resultsScoreText.innerHTML = `Your score is <span id="score-text" class="font-bold">${appState.currentOsce.score}</span> out of <span id="total-questions" class="font-bold">${appState.currentOsce.totalQuestions}</span>.`; [cite: 949]
        [cite_start]restartBtn.classList.add('hidden'); [cite: 950]
        [cite_start]reviewIncorrectBtn.classList.add('hidden'); [cite: 950]
    }

    function showOsceNavigator() {
        [cite_start]osceNavigatorContent.innerHTML = ''; [cite: 950]
        [cite_start]appState.currentOsce.cases.forEach((caseItem, caseIdx) => { [cite: 951]
            const caseDiv = document.createElement('div');
            caseDiv.className = 'border-b pb-2';
            const caseTitle = document.createElement('h4');
            caseTitle.className = 'font-bold text-slate-700';
            [cite_start]caseTitle.textContent = `Case ${caseIdx + 1}: ${caseItem.Title}`; [cite: 952]
            caseDiv.appendChild(caseTitle);

            const questionsGrid = document.createElement('div');
            questionsGrid.className = 'grid grid-cols-5 sm:grid-cols-8 gap-2 mt-2';
            
            const caseQuestions = appState.allOsceQuestions.filter(q => q.CaseID === caseItem.CaseID);
            [cite_start]caseQuestions.forEach((q, qIdx) => { [cite: 953]
                const button = document.createElement('button');
                button.textContent = qIdx + 1;
                button.className = 'navigator-btn w-10 h-10 rounded-md font-semibold flex items-center justify-center';
                [cite_start]const answerKey = `${caseItem.CaseID}_${q.QuestionID}`; [cite: 954]
                const answer = appState.currentOsce.userAnswers[answerKey];

                if (!answer) {
                    [cite_start]button.classList.add('unanswered'); [cite: 954]
                [cite_start]} else if (answer.isCorrect) { [cite: 955]
                    [cite_start]button.classList.add('correct'); [cite: 955]
                [cite_start]} else { [cite: 956]
                    [cite_start]button.classList.add('incorrect'); [cite: 956]
                [cite_start]} [cite: 957]

                button.addEventListener('click', () => {
                    appState.currentOsce.caseIndex = caseIdx;
                    appState.currentOsce.questionIndex = qIdx;
                    renderOsceQuestion();
                    [cite_start]modalBackdrop.classList.add('hidden'); [cite: 958]
                });
                [cite_start]questionsGrid.appendChild(button); [cite: 959]
            });
            caseDiv.appendChild(questionsGrid);
            osceNavigatorContent.appendChild(caseDiv);
        });

        modalBackdrop.classList.remove('hidden');
        osceNavigatorModal.classList.remove('hidden');
    }

    // --- ADDED: Learning Mode Functions ---
    function showLearningModeBrowseScreen() {
        [cite_start]showScreen(learningModeContainer); [cite: 959]
        [cite_start]learningModeControls.classList.remove('hidden'); [cite: 960]
        learningModeViewer.classList.add('hidden');
        appState.navigationHistory.push(showLearningModeBrowseScreen);
    }

    function launchLearningMode(title, questions) {
        [cite_start]showScreen(learningModeContainer); [cite: 960]
        [cite_start]appState.currentLearning.questions = questions; [cite: 961]
        appState.currentLearning.currentIndex = 0;
        appState.currentLearning.title = title;
        
        learningModeControls.classList.add('hidden');
        learningModeViewer.classList.remove('hidden');
        learningTitle.textContent = `Studying: ${title}`;

        [cite_start]showLearningQuestion(); [cite: 961]
    [cite_start]} [cite: 962]

    function showLearningQuestion() {
        [cite_start]const { questions, currentIndex } = appState.currentLearning; [cite: 962]
        [cite_start]const currentQuestion = questions[currentIndex]; [cite: 963]

        learningImageContainer.innerHTML = '';
        if (currentQuestion.ImageURL) {
            [cite_start]const img = document.createElement('img'); [cite: 963]
            [cite_start]img.src = currentQuestion.ImageURL; [cite: 964]
            img.alt = 'Question Image';
            img.className = 'max-h-48 rounded-lg mx-auto mb-4 cursor-pointer hover:opacity-80 transition-opacity';
            [cite_start]img.addEventListener('click', () => showImageModal(currentQuestion.ImageURL)); [cite: 964]
            [cite_start]learningImageContainer.appendChild(img); [cite: 965]
        }

        [cite_start]learningQuestionText.textContent = currentQuestion.question; [cite: 965]
        [cite_start]learningProgressText.textContent = `Question ${currentIndex + 1} of ${questions.length}`; [cite: 966]
        learningSourceText.textContent = `Source: ${currentQuestion.source || 'N/A'} | Chapter: ${currentQuestion.chapter || [cite_start]'N/A'}`; [cite: 966]
        [cite_start]learningAnswerButtons.innerHTML = ''; [cite: 967]
        currentQuestion.answerOptions.forEach(answer => {
            const answerDiv = document.createElement('div');
            const button = document.createElement('button');
            button.textContent = answer.text;
            button.className = 'learning-answer-btn w-full text-left p-4 rounded-lg';
            [cite_start]button.disabled = true; [cite: 968]

            if (answer.isCorrect) {
                button.classList.add('correct');
                const rationale = document.createElement('p');
                rationale.className = 'learning-rationale';
                rationale.textContent = answer.rationale || [cite_start]'No rationale provided for this answer.'; [cite: 969]
                answerDiv.appendChild(button);
                answerDiv.appendChild(rationale);
            } else {
                answerDiv.appendChild(button);
            [cite_start]} [cite: 970]
            
            learningAnswerButtons.appendChild(answerDiv);
        });
        [cite_start]learningPreviousBtn.disabled = currentIndex === 0; [cite: 971]
        learningPreviousBtn.classList.toggle('opacity-50', currentIndex === 0);

        [cite_start]learningNextBtn.disabled = currentIndex === questions.length - 1; [cite: 971]
        [cite_start]learningNextBtn.classList.toggle('opacity-50', currentIndex === questions.length - 1); [cite: 972]
    }

    function handleLearningNext() {
        if (appState.currentLearning.currentIndex < appState.currentLearning.questions.length - 1) {
            [cite_start]appState.currentLearning.currentIndex++; [cite: 972]
            [cite_start]showLearningQuestion(); [cite: 973]
        }
    }

    function handleLearningPrevious() {
        if (appState.currentLearning.currentIndex > 0) {
            [cite_start]appState.currentLearning.currentIndex--; [cite: 973]
            [cite_start]showLearningQuestion(); [cite: 974]
        }
    }
    
    function handleLearningSearch() {
        [cite_start]const searchTerm = learningSearchInput.value.trim().toLowerCase(); [cite: 974]
        [cite_start]if (searchTerm.length < 3) { [cite: 975]
            [cite_start]learningSearchError.textContent = 'Please enter at least 3 characters to search.'; [cite: 975]
            [cite_start]learningSearchError.classList.remove('hidden'); [cite: 976]
            return;
        }
        [cite_start]learningSearchError.classList.add('hidden'); [cite: 976]
        const filteredQuestions = appState.allQuestions.filter(q => 
            q.question.toLowerCase().includes(searchTerm) || 
            q.answerOptions.some(opt => opt.text.toLowerCase().includes(searchTerm))
        [cite_start]); [cite: 977]
        [cite_start]if (filteredQuestions.length === 0) { [cite: 978]
            [cite_start]learningSearchError.textContent = `No questions found for "${learningSearchInput.value}".`; [cite: 978]
            [cite_start]learningSearchError.classList.remove('hidden'); [cite: 979]
        } else {
            [cite_start]launchLearningMode(`Search Results for "${learningSearchInput.value}"`, filteredQuestions); [cite: 979]
        [cite_start]} [cite: 980]
    }
    
    function handleQBankSearch() {
        [cite_start]const searchTerm = qbankSearchInput.value.trim().toLowerCase(); [cite: 980]
        [cite_start]const errorEl = qbankSearchError; [cite: 981]
        errorEl.classList.add('hidden');
        qbankSearchResultsContainer.classList.add('hidden');

        if (searchTerm.length < 3) {
            [cite_start]errorEl.textContent = 'Please enter at least 3 characters to search.'; [cite: 981]
            [cite_start]errorEl.classList.remove('hidden'); [cite: 982]
            return;
        }

        const filteredQuestions = appState.allQuestions.filter(q => 
            q.question.toLowerCase().includes(searchTerm) || 
            q.answerOptions.some(opt => opt.text.toLowerCase().includes(searchTerm))
        [cite_start]); [cite: 982]
        appState.qbankSearchResults = filteredQuestions; [cite_start]// Store results [cite: 983]

        if (filteredQuestions.length === 0) {
            [cite_start]errorEl.textContent = `No questions found for "${qbankSearchInput.value}".`; [cite: 983]
            [cite_start]errorEl.classList.remove('hidden'); [cite: 984]
        } else {
            [cite_start]const sources = [...new Set(filteredQuestions.map(q => q.source || 'N/A'))].join(', '); [cite: 984]
            qbankSearchResultsInfo.textContent = `Found ${filteredQuestions.length} questions for "${qbankSearchInput.value}". [cite_start]Sources: ${sources}`; [cite: 985]
            [cite_start]qbankSearchResultsContainer.classList.remove('hidden'); [cite: 985]
        [cite_start]} [cite: 986]
    }

    function startSearchedQuiz() {
        [cite_start]const requestedCount = parseInt(qbankSearchQCount.value, 10); [cite: 986]
        [cite_start]const errorEl = qbankSearchError; [cite: 987]
        errorEl.classList.add('hidden');

        const questionsToUse = appState.qbankSearchResults;

        if (isNaN(requestedCount) || requestedCount <= 0) {
            // If input is empty, use all questions
            [cite_start]const shuffled = [...questionsToUse].sort(() => Math.random() - 0.5); [cite: 987]
            [cite_start]launchQuiz(shuffled, `Quiz for "${qbankSearchInput.value}"`); [cite: 988]
        } else {
            if (requestedCount > questionsToUse.length) {
                errorEl.textContent = `Only ${questionsToUse.length} questions found.
Please request a smaller number.`;
